// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "Schema-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/sqlite/traits.hxx>
#include <odb/sqlite/database.hxx>
#include <odb/sqlite/transaction.hxx>
#include <odb/sqlite/connection.hxx>
#include <odb/sqlite/statement.hxx>
#include <odb/sqlite/statement-cache.hxx>
#include <odb/sqlite/simple-object-statements.hxx>
#include <odb/sqlite/no-id-object-statements.hxx>
#include <odb/sqlite/view-statements.hxx>
#include <odb/sqlite/container-statements.hxx>
#include <odb/sqlite/exceptions.hxx>
#include <odb/sqlite/simple-object-result.hxx>
#include <odb/sqlite/no-id-object-result.hxx>
#include <odb/sqlite/view-result.hxx>

namespace odb
{
  // Metadata
  //

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // seed_
    //
    if (t[0UL])
    {
      i.seed_value.capacity (i.seed_size);
      grew = true;
    }

    // network_
    //
    t[1UL] = false;

    // created_
    //
    t[2UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // seed_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.seed_value.data ();
    b[n].size = &i.seed_size;
    b[n].capacity = i.seed_value.capacity ();
    b[n].is_null = &i.seed_null;
    n++;

    // network_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.network_value;
    b[n].is_null = &i.network_null;
    n++;

    // created_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.created_value;
    b[n].is_null = &i.created_null;
    n++;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // seed_
    //
    {
      ::std::string const& v =
        o.seed_;

      bool is_null (false);
      std::size_t cap (i.seed_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.seed_value,
        i.seed_size,
        is_null,
        v);
      i.seed_null = is_null;
      grew = grew || (cap != i.seed_value.capacity ());
    }

    // network_
    //
    {
      ::Coin::Network const& v =
        o.network_;

      bool is_null (false);
      sqlite::value_traits<
          ::Coin::Network,
          sqlite::id_integer >::set_image (
        i.network_value,
        is_null,
        v);
      i.network_null = is_null;
    }

    // created_
    //
    {
      ::uint32_t const& v =
        o.created_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.created_value,
        is_null,
        v);
      i.created_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // seed_
    //
    {
      ::std::string& v =
        o.seed_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.seed_value,
        i.seed_size,
        i.seed_null);
    }

    // network_
    //
    {
      ::Coin::Network& v =
        o.network_;

      sqlite::value_traits<
          ::Coin::Network,
          sqlite::id_integer >::set_value (
        v,
        i.network_value,
        i.network_null);
    }

    // created_
    //
    {
      ::uint32_t& v =
        o.created_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.created_value,
        i.created_null);
    }
  }

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Metadata\" "
  "(\"seed\", "
  "\"network\", "
  "\"created\") "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Metadata\".\"seed\", "
  "\"Metadata\".\"network\", "
  "\"Metadata\".\"created\" "
  "FROM \"Metadata\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Metadata\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >::table_name[] =
  "\"Metadata\"";

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  result< access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >::object_type >
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::no_id_object_result_impl<object_type> > r (
      new (shared) sqlite::no_id_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // Key
  //

  struct access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        id,
        i.index_value,
        i.index_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // index_
    //
    t[0UL] = false;

    // generated_
    //
    t[1UL] = false;

    // used_
    //
    t[2UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // index_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.index_value;
      b[n].is_null = &i.index_null;
      n++;
    }

    // generated_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.generated_value;
    b[n].is_null = &i.generated_null;
    n++;

    // used_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.used_value;
    b[n].is_null = &i.used_null;
    n++;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // index_
    //
    if (sk == statement_insert)
    {
      ::uint32_t const& v =
        o.index_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.index_value,
        is_null,
        v);
      i.index_null = is_null;
    }

    // generated_
    //
    {
      ::uint32_t const& v =
        o.generated_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.generated_value,
        is_null,
        v);
      i.generated_null = is_null;
    }

    // used_
    //
    {
      bool const& v =
        o.used_;

      bool is_null (false);
      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_image (
        i.used_value,
        is_null,
        v);
      i.used_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // index_
    //
    {
      ::uint32_t& v =
        o.index_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.index_value,
        i.index_null);
    }

    // generated_
    //
    {
      ::uint32_t& v =
        o.generated_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.generated_value,
        i.generated_null);
    }

    // used_
    //
    {
      bool& v =
        o.used_;

      sqlite::value_traits<
          bool,
          sqlite::id_integer >::set_value (
        v,
        i.used_value,
        i.used_null);
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Key\" "
  "(\"index\", "
  "\"generated\", "
  "\"used\") "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Key\".\"index\", "
  "\"Key\".\"generated\", "
  "\"Key\".\"used\" "
  "FROM \"Key\" "
  "WHERE \"Key\".\"index\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::update_statement[] =
  "UPDATE \"Key\" "
  "SET "
  "\"generated\"=?, "
  "\"used\"=? "
  "WHERE \"index\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Key\" "
  "WHERE \"index\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Key\".\"index\", "
  "\"Key\".\"generated\", "
  "\"Key\".\"used\" "
  "FROM \"Key\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Key\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::table_name[] =
  "\"Key\"";

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.index_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.index_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.index_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::pointer_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.index_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::object_type >
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // Address
  //

  const char alias_traits<  ::joystream::bitcoin::detail::store::Key,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::key_tag>::
  table_name[] = "\"key\"";

  struct access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // address_
    //
    if (t[1UL])
    {
      i.address_value.capacity (i.address_size);
      grew = true;
    }

    // key_
    //
    t[2UL] = false;

    // scriptPubKey_
    //
    if (t[3UL])
    {
      i.scriptPubKey_value.capacity (i.scriptPubKey_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // address_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.address_value.data ();
    b[n].size = &i.address_size;
    b[n].capacity = i.address_value.capacity ();
    b[n].is_null = &i.address_null;
    n++;

    // key_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.key_value;
    b[n].is_null = &i.key_null;
    n++;

    // scriptPubKey_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.scriptPubKey_value.data ();
    b[n].size = &i.scriptPubKey_size;
    b[n].capacity = i.scriptPubKey_value.capacity ();
    b[n].is_null = &i.scriptPubKey_null;
    n++;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // address_
    //
    {
      ::std::string const& v =
        o.address_;

      bool is_null (false);
      std::size_t cap (i.address_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.address_value,
        i.address_size,
        is_null,
        v);
      i.address_null = is_null;
      grew = grew || (cap != i.address_value.capacity ());
    }

    // key_
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Key > const& v =
        o.key_;

      typedef object_traits< ::joystream::bitcoin::detail::store::Key > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Key > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.key_value,
          is_null,
          id);
        i.key_null = is_null;
      }
      else
        throw null_pointer ();
    }

    // scriptPubKey_
    //
    {
      ::std::string const& v =
        o.scriptPubKey_;

      bool is_null (false);
      std::size_t cap (i.scriptPubKey_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.scriptPubKey_value,
        i.scriptPubKey_size,
        is_null,
        v);
      i.scriptPubKey_null = is_null;
      grew = grew || (cap != i.scriptPubKey_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // address_
    //
    {
      ::std::string& v =
        o.address_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.address_value,
        i.address_size,
        i.address_null);
    }

    // key_
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Key >& v =
        o.key_;

      typedef object_traits< ::joystream::bitcoin::detail::store::Key > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Key > > ptr_traits;

      if (i.key_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.key_value,
          i.key_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // scriptPubKey_
    //
    {
      ::std::string& v =
        o.scriptPubKey_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.scriptPubKey_value,
        i.scriptPubKey_size,
        i.scriptPubKey_null);
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Address\" "
  "(\"id\", "
  "\"address\", "
  "\"key\", "
  "\"scriptPubKey\") "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Address\".\"id\", "
  "\"Address\".\"address\", "
  "\"Address\".\"key\", "
  "\"Address\".\"scriptPubKey\" "
  "FROM \"Address\" "
  "WHERE \"Address\".\"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::update_statement[] =
  "UPDATE \"Address\" "
  "SET "
  "\"address\"=?, "
  "\"key\"=?, "
  "\"scriptPubKey\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Address\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Address\".\"id\",\n"
  "\"Address\".\"address\",\n"
  "\"Address\".\"key\",\n"
  "\"Address\".\"scriptPubKey\"\n"
  "FROM \"Address\"\n"
  "LEFT JOIN \"Key\" AS \"key\" ON \"key\".\"index\"=\"Address\".\"key\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Address\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::table_name[] =
  "\"Address\"";

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::pointer_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::object_type >
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // BlockHeader
  //

  struct access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        id,
        i.id_value,
        i.id_size,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    if (t[0UL])
    {
      i.id_value.capacity (i.id_size);
      grew = true;
    }

    // height_
    //
    t[1UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::image_traits<
        ::std::string,
        sqlite::id_text>::bind_value;
      b[n].buffer = i.id_value.data ();
      b[n].size = &i.id_size;
      b[n].capacity = i.id_value.capacity ();
      b[n].is_null = &i.id_null;
      n++;
    }

    // height_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.height_value;
      b[n].is_null = &i.height_null;
      n++;
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.id_value.data ();
    b[n].size = &i.id_size;
    b[n].capacity = i.id_value.capacity ();
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      ::std::string const& v =
        o.id_;

      bool is_null (false);
      std::size_t cap (i.id_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.id_value,
        i.id_size,
        is_null,
        v);
      i.id_null = is_null;
      grew = grew || (cap != i.id_value.capacity ());
    }

    // height_
    //
    if (sk == statement_insert)
    {
      ::uint32_t const& v =
        o.height_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.height_value,
        is_null,
        v);
      i.height_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      ::std::string& v =
        o.id_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.id_value,
        i.id_size,
        i.id_null);
    }

    // height_
    //
    {
      ::uint32_t& v =
        o.height_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.height_value,
        i.height_null);
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    {
      bool is_null (false);
      std::size_t cap (i.id_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.id_value,
        i.id_size,
        is_null,
        id);
      i.id_null = is_null;
      grew = grew || (cap != i.id_value.capacity ());
    }

    if (grew)
      i.version++;
  }

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::persist_statement[] =
  "INSERT INTO \"BlockHeader\" "
  "(\"id\", "
  "\"height\") "
  "VALUES "
  "(?, ?)";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::find_statement[] =
  "SELECT "
  "\"BlockHeader\".\"id\", "
  "\"BlockHeader\".\"height\" "
  "FROM \"BlockHeader\" "
  "WHERE \"BlockHeader\".\"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::erase_statement[] =
  "DELETE FROM \"BlockHeader\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::query_statement[] =
  "SELECT "
  "\"BlockHeader\".\"id\", "
  "\"BlockHeader\".\"height\" "
  "FROM \"BlockHeader\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"BlockHeader\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::table_name[] =
  "\"BlockHeader\"";

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::pointer_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::object_type >
  access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // Output_id
  //

  bool access::composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // value_
    //
    t[0UL] = false;

    // scriptPubKey_
    //
    if (t[1UL])
    {
      i.scriptPubKey_value.capacity (i.scriptPubKey_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // value_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.value_value;
    b[n].is_null = &i.value_null;
    n++;

    // scriptPubKey_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.scriptPubKey_value.data ();
    b[n].size = &i.scriptPubKey_size;
    b[n].capacity = i.scriptPubKey_value.capacity ();
    b[n].is_null = &i.scriptPubKey_null;
    n++;
  }

  bool access::composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::
  init (image_type& i,
        const value_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // value_
    //
    {
      ::odb::nullable< long long unsigned int > const& v =
        o.value_;

      bool is_null (false);
      sqlite::value_traits<
          ::odb::nullable< long long unsigned int >,
          sqlite::id_integer >::set_image (
        i.value_value,
        is_null,
        v);
      i.value_null = is_null;
    }

    // scriptPubKey_
    //
    {
      ::std::string const& v =
        o.scriptPubKey_;

      bool is_null (false);
      std::size_t cap (i.scriptPubKey_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.scriptPubKey_value,
        i.scriptPubKey_size,
        is_null,
        v);
      i.scriptPubKey_null = is_null;
      grew = grew || (cap != i.scriptPubKey_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // value_
    //
    {
      ::odb::nullable< long long unsigned int >& v =
        o.value_;

      sqlite::value_traits<
          ::odb::nullable< long long unsigned int >,
          sqlite::id_integer >::set_value (
        v,
        i.value_value,
        i.value_null);
    }

    // scriptPubKey_
    //
    {
      ::std::string& v =
        o.scriptPubKey_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.scriptPubKey_value,
        i.scriptPubKey_size,
        i.scriptPubKey_null);
    }
  }

  // Output
  //

  const char alias_traits<  ::joystream::bitcoin::detail::store::Address,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::address_tag>::
  table_name[] = "\"address\"";

  struct access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::init (
        id,
        i.id_value,
        db);
    }

    return id;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    if (composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::grow (
          i.id_value, t + 0UL))
      grew = true;

    // address_
    //
    t[2UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::bind (
        b + n, i.id_value, sk);
      n += 2UL;
    }

    // address_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.address_value;
    b[n].is_null = &i.address_null;
    n++;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    sqlite::statement_kind sk (sqlite::statement_select);
    composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::bind (
      b + n, i.id_value, sk);
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      ::joystream::bitcoin::detail::store::Output_id const& v =
        o.id_;

      if (composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::init (
            i.id_value,
            v,
            sk))
        grew = true;
    }

    // address_
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Address > const& v =
        o.address_;

      typedef object_traits< ::joystream::bitcoin::detail::store::Address > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Address > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.address_value,
          is_null,
          id);
        i.address_null = is_null;
      }
      else
        i.address_null = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      ::joystream::bitcoin::detail::store::Output_id& v =
        o.id_;

      composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::init (
        v,
        i.id_value,
        db);
    }

    // address_
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Address >& v =
        o.address_;

      typedef object_traits< ::joystream::bitcoin::detail::store::Address > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Address > > ptr_traits;

      if (i.address_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.address_value,
          i.address_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    sqlite::statement_kind sk (sqlite::statement_select);
    {
      if (composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::init (
            i.id_value,
            id,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Output\" "
  "(\"id_value\", "
  "\"id_scriptPubKey\", "
  "\"address\") "
  "VALUES "
  "(?, ?, ?)";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Output\".\"id_value\", "
  "\"Output\".\"id_scriptPubKey\", "
  "\"Output\".\"address\" "
  "FROM \"Output\" "
  "WHERE \"Output\".\"id_value\"=? AND \"Output\".\"id_scriptPubKey\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::update_statement[] =
  "UPDATE \"Output\" "
  "SET "
  "\"address\"=? "
  "WHERE \"id_value\"=? AND \"id_scriptPubKey\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Output\" "
  "WHERE \"id_value\"=? AND \"id_scriptPubKey\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Output\".\"id_value\",\n"
  "\"Output\".\"id_scriptPubKey\",\n"
  "\"Output\".\"address\"\n"
  "FROM \"Output\"\n"
  "LEFT JOIN \"Address\" AS \"address\" ON \"address\".\"id\"=\"Output\".\"address\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Output\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::table_name[] =
  "\"Output\"";

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::pointer_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::object_type >
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // Input_id
  //

  bool access::composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // op_txid_
    //
    if (t[0UL])
    {
      i.op_txid_value.capacity (i.op_txid_size);
      grew = true;
    }

    // op_index_
    //
    t[1UL] = false;

    // scriptSig_
    //
    if (t[2UL])
    {
      i.scriptSig_value.capacity (i.scriptSig_size);
      grew = true;
    }

    // sequence_
    //
    t[3UL] = false;

    return grew;
  }

  void access::composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // op_txid_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.op_txid_value.data ();
    b[n].size = &i.op_txid_size;
    b[n].capacity = i.op_txid_value.capacity ();
    b[n].is_null = &i.op_txid_null;
    n++;

    // op_index_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.op_index_value;
    b[n].is_null = &i.op_index_null;
    n++;

    // scriptSig_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.scriptSig_value.data ();
    b[n].size = &i.scriptSig_size;
    b[n].capacity = i.scriptSig_value.capacity ();
    b[n].is_null = &i.scriptSig_null;
    n++;

    // sequence_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.sequence_value;
    b[n].is_null = &i.sequence_null;
    n++;
  }

  bool access::composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::
  init (image_type& i,
        const value_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // op_txid_
    //
    {
      ::std::string const& v =
        o.op_txid_;

      bool is_null (false);
      std::size_t cap (i.op_txid_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.op_txid_value,
        i.op_txid_size,
        is_null,
        v);
      i.op_txid_null = is_null;
      grew = grew || (cap != i.op_txid_value.capacity ());
    }

    // op_index_
    //
    {
      ::odb::nullable< unsigned int > const& v =
        o.op_index_;

      bool is_null (false);
      sqlite::value_traits<
          ::odb::nullable< unsigned int >,
          sqlite::id_integer >::set_image (
        i.op_index_value,
        is_null,
        v);
      i.op_index_null = is_null;
    }

    // scriptSig_
    //
    {
      ::std::string const& v =
        o.scriptSig_;

      bool is_null (false);
      std::size_t cap (i.scriptSig_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.scriptSig_value,
        i.scriptSig_size,
        is_null,
        v);
      i.scriptSig_null = is_null;
      grew = grew || (cap != i.scriptSig_value.capacity ());
    }

    // sequence_
    //
    {
      ::odb::nullable< unsigned int > const& v =
        o.sequence_;

      bool is_null (false);
      sqlite::value_traits<
          ::odb::nullable< unsigned int >,
          sqlite::id_integer >::set_image (
        i.sequence_value,
        is_null,
        v);
      i.sequence_null = is_null;
    }

    return grew;
  }

  void access::composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // op_txid_
    //
    {
      ::std::string& v =
        o.op_txid_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.op_txid_value,
        i.op_txid_size,
        i.op_txid_null);
    }

    // op_index_
    //
    {
      ::odb::nullable< unsigned int >& v =
        o.op_index_;

      sqlite::value_traits<
          ::odb::nullable< unsigned int >,
          sqlite::id_integer >::set_value (
        v,
        i.op_index_value,
        i.op_index_null);
    }

    // scriptSig_
    //
    {
      ::std::string& v =
        o.scriptSig_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.scriptSig_value,
        i.scriptSig_size,
        i.scriptSig_null);
    }

    // sequence_
    //
    {
      ::odb::nullable< unsigned int >& v =
        o.sequence_;

      sqlite::value_traits<
          ::odb::nullable< unsigned int >,
          sqlite::id_integer >::set_value (
        v,
        i.sequence_value,
        i.sequence_null);
    }
  }

  // Input
  //

  struct access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::init (
        id,
        i.id_value,
        db);
    }

    return id;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    if (composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::grow (
          i.id_value, t + 0UL))
      grew = true;

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::bind (
        b + n, i.id_value, sk);
      n += 4UL;
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    sqlite::statement_kind sk (sqlite::statement_select);
    composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::bind (
      b + n, i.id_value, sk);
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      ::joystream::bitcoin::detail::store::Input_id const& v =
        o.id_;

      if (composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::init (
            i.id_value,
            v,
            sk))
        grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      ::joystream::bitcoin::detail::store::Input_id& v =
        o.id_;

      composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::init (
        v,
        i.id_value,
        db);
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    sqlite::statement_kind sk (sqlite::statement_select);
    {
      if (composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::init (
            i.id_value,
            id,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Input\" "
  "(\"id_op_txid\", "
  "\"id_op_index\", "
  "\"id_scriptSig\", "
  "\"id_sequence\") "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Input\".\"id_op_txid\", "
  "\"Input\".\"id_op_index\", "
  "\"Input\".\"id_scriptSig\", "
  "\"Input\".\"id_sequence\" "
  "FROM \"Input\" "
  "WHERE \"Input\".\"id_op_txid\"=? AND \"Input\".\"id_op_index\"=? AND \"Input\".\"id_scriptSig\"=? AND \"Input\".\"id_sequence\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Input\" "
  "WHERE \"id_op_txid\"=? AND \"id_op_index\"=? AND \"id_scriptSig\"=? AND \"id_sequence\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::query_statement[] =
  "SELECT "
  "\"Input\".\"id_op_txid\", "
  "\"Input\".\"id_op_index\", "
  "\"Input\".\"id_scriptSig\", "
  "\"Input\".\"id_sequence\" "
  "FROM \"Input\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Input\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::table_name[] =
  "\"Input\"";

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::pointer_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::object_type >
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // Transaction
  //

  const char alias_traits<  ::joystream::bitcoin::detail::store::BlockHeader,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::header_tag>::
  table_name[] = "\"header\"";

  struct access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        id,
        i.txid_value,
        i.txid_size,
        i.txid_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // txid_
    //
    if (t[0UL])
    {
      i.txid_value.capacity (i.txid_size);
      grew = true;
    }

    // version_
    //
    t[1UL] = false;

    // lockTime_
    //
    t[2UL] = false;

    // header_
    //
    if (t[3UL])
    {
      i.header_value.capacity (i.header_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // txid_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::image_traits<
        ::std::string,
        sqlite::id_text>::bind_value;
      b[n].buffer = i.txid_value.data ();
      b[n].size = &i.txid_size;
      b[n].capacity = i.txid_value.capacity ();
      b[n].is_null = &i.txid_null;
      n++;
    }

    // version_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.version_value;
      b[n].is_null = &i.version_null;
      n++;
    }

    // lockTime_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.lockTime_value;
      b[n].is_null = &i.lockTime_null;
      n++;
    }

    // header_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.header_value.data ();
    b[n].size = &i.header_size;
    b[n].capacity = i.header_value.capacity ();
    b[n].is_null = &i.header_null;
    n++;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.id_value.data ();
    b[n].size = &i.id_size;
    b[n].capacity = i.id_value.capacity ();
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // txid_
    //
    if (sk == statement_insert)
    {
      ::std::string const& v =
        o.txid_;

      bool is_null (false);
      std::size_t cap (i.txid_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.txid_value,
        i.txid_size,
        is_null,
        v);
      i.txid_null = is_null;
      grew = grew || (cap != i.txid_value.capacity ());
    }

    // version_
    //
    if (sk == statement_insert)
    {
      ::uint32_t const& v =
        o.version_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.version_value,
        is_null,
        v);
      i.version_null = is_null;
    }

    // lockTime_
    //
    if (sk == statement_insert)
    {
      ::uint32_t const& v =
        o.lockTime_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.lockTime_value,
        is_null,
        v);
      i.lockTime_null = is_null;
    }

    // header_
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::BlockHeader > const& v =
        o.header_;

      typedef object_traits< ::joystream::bitcoin::detail::store::BlockHeader > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::BlockHeader > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        std::size_t cap (i.header_value.capacity ());
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_text >::set_image (
          i.header_value,
          i.header_size,
          is_null,
          id);
        i.header_null = is_null;
        grew = grew || (cap != i.header_value.capacity ());
      }
      else
        i.header_null = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // txid_
    //
    {
      ::std::string& v =
        o.txid_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.txid_value,
        i.txid_size,
        i.txid_null);
    }

    // version_
    //
    {
      ::uint32_t& v =
        o.version_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.version_value,
        i.version_null);
    }

    // lockTime_
    //
    {
      ::uint32_t& v =
        o.lockTime_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.lockTime_value,
        i.lockTime_null);
    }

    // header_
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::BlockHeader >& v =
        o.header_;

      typedef object_traits< ::joystream::bitcoin::detail::store::BlockHeader > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::BlockHeader > > ptr_traits;

      if (i.header_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_text >::set_value (
          id,
          i.header_value,
          i.header_size,
          i.header_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    bool grew (false);
    {
      bool is_null (false);
      std::size_t cap (i.id_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.id_value,
        i.id_size,
        is_null,
        id);
      i.id_null = is_null;
      grew = grew || (cap != i.id_value.capacity ());
    }

    if (grew)
      i.version++;
  }

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::persist_statement[] =
  "INSERT INTO \"Transaction\" "
  "(\"txid\", "
  "\"version\", "
  "\"lockTime\", "
  "\"header\") "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::find_statement[] =
  "SELECT "
  "\"Transaction\".\"txid\", "
  "\"Transaction\".\"version\", "
  "\"Transaction\".\"lockTime\", "
  "\"Transaction\".\"header\" "
  "FROM \"Transaction\" "
  "WHERE \"Transaction\".\"txid\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::update_statement[] =
  "UPDATE \"Transaction\" "
  "SET "
  "\"header\"=? "
  "WHERE \"txid\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::erase_statement[] =
  "DELETE FROM \"Transaction\" "
  "WHERE \"txid\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"Transaction\".\"txid\",\n"
  "\"Transaction\".\"version\",\n"
  "\"Transaction\".\"lockTime\",\n"
  "\"Transaction\".\"header\"\n"
  "FROM \"Transaction\"\n"
  "LEFT JOIN \"BlockHeader\" AS \"header\" ON \"header\".\"id\"=\"Transaction\".\"header\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"Transaction\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::table_name[] =
  "\"Transaction\"";

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.txid_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::pointer_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.txid_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::object_type >
  access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // tx_ix_t
  //

  bool access::composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // tx
    //
    if (t[0UL])
    {
      i.tx_value.capacity (i.tx_size);
      grew = true;
    }

    // index_
    //
    t[1UL] = false;

    return grew;
  }

  void access::composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // tx
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.tx_value.data ();
    b[n].size = &i.tx_size;
    b[n].capacity = i.tx_value.capacity ();
    b[n].is_null = &i.tx_null;
    n++;

    // index_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.index_value;
    b[n].is_null = &i.index_null;
    n++;
  }

  bool access::composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::
  init (image_type& i,
        const value_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // tx
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Transaction > const& v =
        o.tx;

      typedef object_traits< ::joystream::bitcoin::detail::store::Transaction > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Transaction > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        std::size_t cap (i.tx_value.capacity ());
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_text >::set_image (
          i.tx_value,
          i.tx_size,
          is_null,
          id);
        i.tx_null = is_null;
        grew = grew || (cap != i.tx_value.capacity ());
      }
      else
        throw null_pointer ();
    }

    // index_
    //
    {
      ::odb::nullable< unsigned int > const& v =
        o.index_;

      bool is_null (false);
      sqlite::value_traits<
          ::odb::nullable< unsigned int >,
          sqlite::id_integer >::set_image (
        i.index_value,
        is_null,
        v);
      i.index_null = is_null;
    }

    return grew;
  }

  void access::composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // tx
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Transaction >& v =
        o.tx;

      typedef object_traits< ::joystream::bitcoin::detail::store::Transaction > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Transaction > > ptr_traits;

      if (i.tx_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_text >::set_value (
          id,
          i.tx_value,
          i.tx_size,
          i.tx_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }

    // index_
    //
    {
      ::odb::nullable< unsigned int >& v =
        o.index_;

      sqlite::value_traits<
          ::odb::nullable< unsigned int >,
          sqlite::id_integer >::set_value (
        v,
        i.index_value,
        i.index_null);
    }
  }

  // TxHasInput
  //

  const char alias_traits<  ::joystream::bitcoin::detail::store::Transaction,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::tx_ix_tag::tx_tag>::
  table_name[] = "\"tx_ix_tx\"";

  const char alias_traits<  ::joystream::bitcoin::detail::store::Input,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::input_tag>::
  table_name[] = "\"input\"";

  struct access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // tx_ix_
    //
    if (composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::grow (
          i.tx_ix_value, t + 1UL))
      grew = true;

    // input_
    //
    if (composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::grow (
          i.input_value, t + 3UL))
      grew = true;

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // tx_ix_
    //
    if (sk != statement_update)
    {
      composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::bind (
        b + n, i.tx_ix_value, sk);
      n += 2UL;
    }

    // input_
    //
    if (sk != statement_update)
    {
      composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::bind (
        b + n, i.input_value, sk);
      n += 4UL;
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // tx_ix_
    //
    if (sk == statement_insert)
    {
      ::joystream::bitcoin::detail::store::tx_ix_t const& v =
        o.tx_ix_;

      if (composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::init (
            i.tx_ix_value,
            v,
            sk))
        grew = true;
    }

    // input_
    //
    if (sk == statement_insert)
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Input > const& v =
        o.input_;

      typedef object_traits< ::joystream::bitcoin::detail::store::Input > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Input > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        if (composite_value_traits< obj_traits::id_type, id_sqlite >::init (
              i.input_value,
              id,
              sk))
          grew = true;
      }
      else
        throw null_pointer ();
    }

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // tx_ix_
    //
    {
      ::joystream::bitcoin::detail::store::tx_ix_t& v =
        o.tx_ix_;

      composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::init (
        v,
        i.tx_ix_value,
        db);
    }

    // input_
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Input >& v =
        o.input_;

      typedef object_traits< ::joystream::bitcoin::detail::store::Input > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Input > > ptr_traits;

      if (composite_value_traits< obj_traits::id_type, id_sqlite >::get_null (
            i.input_value))
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        composite_value_traits< obj_traits::id_type, id_sqlite >::init (
          id,
          i.input_value,
          db);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::persist_statement[] =
  "INSERT INTO \"TxHasInput\" "
  "(\"id\", "
  "\"tx_ix_tx\", "
  "\"tx_ix_index\", "
  "\"input_op_txid\", "
  "\"input_op_index\", "
  "\"input_scriptSig\", "
  "\"input_sequence\") "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::find_statement[] =
  "SELECT "
  "\"TxHasInput\".\"id\", "
  "\"TxHasInput\".\"tx_ix_tx\", "
  "\"TxHasInput\".\"tx_ix_index\", "
  "\"TxHasInput\".\"input_op_txid\", "
  "\"TxHasInput\".\"input_op_index\", "
  "\"TxHasInput\".\"input_scriptSig\", "
  "\"TxHasInput\".\"input_sequence\" "
  "FROM \"TxHasInput\" "
  "WHERE \"TxHasInput\".\"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::erase_statement[] =
  "DELETE FROM \"TxHasInput\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"TxHasInput\".\"id\",\n"
  "\"TxHasInput\".\"tx_ix_tx\",\n"
  "\"TxHasInput\".\"tx_ix_index\",\n"
  "\"TxHasInput\".\"input_op_txid\",\n"
  "\"TxHasInput\".\"input_op_index\",\n"
  "\"TxHasInput\".\"input_scriptSig\",\n"
  "\"TxHasInput\".\"input_sequence\"\n"
  "FROM \"TxHasInput\"\n"
  "LEFT JOIN \"Transaction\" AS \"tx_ix_tx\" ON \"tx_ix_tx\".\"txid\"=\"TxHasInput\".\"tx_ix_tx\"\n"
  "LEFT JOIN \"Input\" AS \"input\" ON \"input\".\"id_op_txid\"=\"TxHasInput\".\"input_op_txid\" AND \"input\".\"id_op_index\"=\"TxHasInput\".\"input_op_index\" AND \"input\".\"id_scriptSig\"=\"TxHasInput\".\"input_scriptSig\" AND \"input\".\"id_sequence\"=\"TxHasInput\".\"input_sequence\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"TxHasInput\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::table_name[] =
  "\"TxHasInput\"";

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::pointer_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::object_type >
  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // TxHasOutput
  //

  const char alias_traits<  ::joystream::bitcoin::detail::store::Transaction,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::tx_ix_tag::tx_tag>::
  table_name[] = "\"tx_ix_tx\"";

  const char alias_traits<  ::joystream::bitcoin::detail::store::Output,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::output_tag>::
  table_name[] = "\"output\"";

  struct access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // tx_ix_
    //
    if (composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::grow (
          i.tx_ix_value, t + 1UL))
      grew = true;

    // output_
    //
    if (composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::grow (
          i.output_value, t + 3UL))
      grew = true;

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // tx_ix_
    //
    if (sk != statement_update)
    {
      composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::bind (
        b + n, i.tx_ix_value, sk);
      n += 2UL;
    }

    // output_
    //
    if (sk != statement_update)
    {
      composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::bind (
        b + n, i.output_value, sk);
      n += 2UL;
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // tx_ix_
    //
    if (sk == statement_insert)
    {
      ::joystream::bitcoin::detail::store::tx_ix_t const& v =
        o.tx_ix_;

      if (composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::init (
            i.tx_ix_value,
            v,
            sk))
        grew = true;
    }

    // output_
    //
    if (sk == statement_insert)
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Output > const& v =
        o.output_;

      typedef object_traits< ::joystream::bitcoin::detail::store::Output > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Output > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        if (composite_value_traits< obj_traits::id_type, id_sqlite >::init (
              i.output_value,
              id,
              sk))
          grew = true;
      }
      else
        throw null_pointer ();
    }

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // tx_ix_
    //
    {
      ::joystream::bitcoin::detail::store::tx_ix_t& v =
        o.tx_ix_;

      composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::init (
        v,
        i.tx_ix_value,
        db);
    }

    // output_
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Output >& v =
        o.output_;

      typedef object_traits< ::joystream::bitcoin::detail::store::Output > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Output > > ptr_traits;

      if (composite_value_traits< obj_traits::id_type, id_sqlite >::get_null (
            i.output_value))
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        composite_value_traits< obj_traits::id_type, id_sqlite >::init (
          id,
          i.output_value,
          db);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::persist_statement[] =
  "INSERT INTO \"TxHasOutput\" "
  "(\"id\", "
  "\"tx_ix_tx\", "
  "\"tx_ix_index\", "
  "\"output_value\", "
  "\"output_scriptPubKey\") "
  "VALUES "
  "(?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::find_statement[] =
  "SELECT "
  "\"TxHasOutput\".\"id\", "
  "\"TxHasOutput\".\"tx_ix_tx\", "
  "\"TxHasOutput\".\"tx_ix_index\", "
  "\"TxHasOutput\".\"output_value\", "
  "\"TxHasOutput\".\"output_scriptPubKey\" "
  "FROM \"TxHasOutput\" "
  "WHERE \"TxHasOutput\".\"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::erase_statement[] =
  "DELETE FROM \"TxHasOutput\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"TxHasOutput\".\"id\",\n"
  "\"TxHasOutput\".\"tx_ix_tx\",\n"
  "\"TxHasOutput\".\"tx_ix_index\",\n"
  "\"TxHasOutput\".\"output_value\",\n"
  "\"TxHasOutput\".\"output_scriptPubKey\"\n"
  "FROM \"TxHasOutput\"\n"
  "LEFT JOIN \"Transaction\" AS \"tx_ix_tx\" ON \"tx_ix_tx\".\"txid\"=\"TxHasOutput\".\"tx_ix_tx\"\n"
  "LEFT JOIN \"Output\" AS \"output\" ON \"output\".\"id_value\"=\"TxHasOutput\".\"output_value\" AND \"output\".\"id_scriptPubKey\"=\"TxHasOutput\".\"output_scriptPubKey\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"TxHasOutput\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::table_name[] =
  "\"TxHasOutput\"";

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::pointer_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::object_type >
  access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // transaction_stat_t
  //

  bool access::view_traits_impl< ::joystream::bitcoin::detail::store::transaction_stat_t, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // count
    //
    t[0UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::joystream::bitcoin::detail::store::transaction_stat_t, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // count
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.count_value;
    b[n].is_null = &i.count_null;
    n++;
  }

  void access::view_traits_impl< ::joystream::bitcoin::detail::store::transaction_stat_t, id_sqlite >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // count
    //
    {
      ::uint64_t& v =
        o.count;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.count_value,
        i.count_null);
    }
  }

  access::view_traits_impl< ::joystream::bitcoin::detail::store::transaction_stat_t, id_sqlite >::query_base_type
  access::view_traits_impl< ::joystream::bitcoin::detail::store::transaction_stat_t, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "count(\"Transaction\".\"txid\") ");

    r += "FROM \"Transaction\"";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::joystream::bitcoin::detail::store::transaction_stat_t, id_sqlite >::view_type >
  access::view_traits_impl< ::joystream::bitcoin::detail::store::transaction_stat_t, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // key_stat_t
  //

  bool access::view_traits_impl< ::joystream::bitcoin::detail::store::key_stat_t, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // count
    //
    t[0UL] = false;

    // max
    //
    t[1UL] = false;

    return grew;
  }

  void access::view_traits_impl< ::joystream::bitcoin::detail::store::key_stat_t, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // count
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.count_value;
    b[n].is_null = &i.count_null;
    n++;

    // max
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.max_value;
    b[n].is_null = &i.max_null;
    n++;
  }

  void access::view_traits_impl< ::joystream::bitcoin::detail::store::key_stat_t, id_sqlite >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // count
    //
    {
      ::uint32_t& v =
        o.count;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.count_value,
        i.count_null);
    }

    // max
    //
    {
      ::uint32_t& v =
        o.max;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.max_value,
        i.max_null);
    }
  }

  access::view_traits_impl< ::joystream::bitcoin::detail::store::key_stat_t, id_sqlite >::query_base_type
  access::view_traits_impl< ::joystream::bitcoin::detail::store::key_stat_t, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "count(\"Key\".\"index\"), "
      "max(\"Key\".\"index\") ");

    r += "FROM \"Key\"";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::joystream::bitcoin::detail::store::key_stat_t, id_sqlite >::view_type >
  access::view_traits_impl< ::joystream::bitcoin::detail::store::key_stat_t, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // key_view_t
  //

  const char alias_traits<  ::joystream::bitcoin::detail::store::Key,
    id_sqlite,
    access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::key_tag>::
  table_name[] = "\"key\"";

  const char alias_traits<  ::joystream::bitcoin::detail::store::Address,
    id_sqlite,
    access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::address_tag>::
  table_name[] = "\"address\"";

  bool access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // key
    //
    if (object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::grow (
          i.key_value, t + 0UL))
      grew = true;

    return grew;
  }

  void access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // key
    //
    object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::bind (
      b + n, i.key_value, sk);
    n += 3UL;
  }

  void access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    // key pre
    //
    typedef ::joystream::bitcoin::detail::store::Key key_object_type;
    typedef object_traits_impl<key_object_type, id_sqlite> key_object_traits;
    typedef key_object_traits::pointer_type key_pointer_type;
    typedef key_object_traits::pointer_traits key_pointer_traits;
    typedef key_object_traits::pointer_cache_traits key_cache_traits;

    key_object_traits::id_type key_id;
    key_pointer_type key_p;
    key_pointer_traits::guard key_pg;
    key_cache_traits::insert_guard key_ig;
    key_object_type* key_o (0);

    {
      if (!(i.key_value.index_null))
      {
        key_id = key_object_traits::id (i.key_value);
        key_p = key_cache_traits::find (*db, key_id);

        if (key_pointer_traits::null_ptr (key_p))
        {
          key_p = object_factory<key_object_type, key_pointer_type>::create ();
          key_pg.reset (key_p);
          key_ig.reset (key_cache_traits::insert (*db, key_id, key_p));
          key_o = key_pointer_traits::get_ptr (key_p);
        }
      }
    }

    // key
    //
    {
      if (key_o != 0)
      {
        key_object_traits::callback (*db, *key_o, callback_event::pre_load);
        key_object_traits::init (*key_o, i.key_value, db);
        key_object_traits::statements_type& sts (
          conn.statement_cache ().find_object<key_object_type> ());
        key_object_traits::load_ (sts, *key_o, false);
      }
    }

    // key post
    //
    {
      if (key_o != 0)
      {
        key_object_traits::callback (*db, *key_o, callback_event::post_load);
        key_cache_traits::load (key_ig.position ());
        key_ig.release ();
        key_pg.release ();
      }

      // If a compiler error points to the line below, then
      // it most likely means that a pointer used in view
      // member cannot be initialized from an object pointer.
      //
      o.key = ::std::shared_ptr< ::joystream::bitcoin::detail::store::Key > (
        std::move (key_p));
    }
  }

  access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::query_base_type
  access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "\"key\".\"index\", "
      "\"key\".\"generated\", "
      "\"key\".\"used\" ");

    r += "FROM \"Key\" AS \"key\"";

    r += " LEFT JOIN \"Address\" AS \"address\" ON";
    r += "\"address\".\"key\"=\"key\".\"index\"";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::view_type >
  access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }

  // InBoundPayment
  //

  const char alias_traits<  ::joystream::bitcoin::detail::store::Address,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::receiveAddress_tag>::
  table_name[] = "\"receiveAddress\"";

  struct access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // created_
    //
    t[1UL] = false;

    // note_
    //
    if (t[2UL])
    {
      i.note_value.capacity (i.note_size);
      grew = true;
    }

    // receiveAddress_
    //
    t[3UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // created_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.created_value;
    b[n].is_null = &i.created_null;
    n++;

    // note_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.note_value.data ();
    b[n].size = &i.note_size;
    b[n].capacity = i.note_value.capacity ();
    b[n].is_null = &i.note_null;
    n++;

    // receiveAddress_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.receiveAddress_value;
    b[n].is_null = &i.receiveAddress_null;
    n++;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // created_
    //
    {
      ::uint32_t const& v =
        o.created_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.created_value,
        is_null,
        v);
      i.created_null = is_null;
    }

    // note_
    //
    {
      ::std::string const& v =
        o.note_;

      bool is_null (false);
      std::size_t cap (i.note_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.note_value,
        i.note_size,
        is_null,
        v);
      i.note_null = is_null;
      grew = grew || (cap != i.note_value.capacity ());
    }

    // receiveAddress_
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Address > const& v =
        o.receiveAddress_;

      typedef object_traits< ::joystream::bitcoin::detail::store::Address > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Address > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.receiveAddress_value,
          is_null,
          id);
        i.receiveAddress_null = is_null;
      }
      else
        i.receiveAddress_null = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // created_
    //
    {
      ::uint32_t& v =
        o.created_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.created_value,
        i.created_null);
    }

    // note_
    //
    {
      ::std::string& v =
        o.note_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.note_value,
        i.note_size,
        i.note_null);
    }

    // receiveAddress_
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Address >& v =
        o.receiveAddress_;

      typedef object_traits< ::joystream::bitcoin::detail::store::Address > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Address > > ptr_traits;

      if (i.receiveAddress_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.receiveAddress_value,
          i.receiveAddress_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::persist_statement[] =
  "INSERT INTO \"InBoundPayment\" "
  "(\"id\", "
  "\"created\", "
  "\"note\", "
  "\"receiveAddress\") "
  "VALUES "
  "(?, ?, ?, ?)";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::find_statement[] =
  "SELECT "
  "\"InBoundPayment\".\"id\", "
  "\"InBoundPayment\".\"created\", "
  "\"InBoundPayment\".\"note\", "
  "\"InBoundPayment\".\"receiveAddress\" "
  "FROM \"InBoundPayment\" "
  "WHERE \"InBoundPayment\".\"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::update_statement[] =
  "UPDATE \"InBoundPayment\" "
  "SET "
  "\"created\"=?, "
  "\"note\"=?, "
  "\"receiveAddress\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::erase_statement[] =
  "DELETE FROM \"InBoundPayment\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"InBoundPayment\".\"id\",\n"
  "\"InBoundPayment\".\"created\",\n"
  "\"InBoundPayment\".\"note\",\n"
  "\"InBoundPayment\".\"receiveAddress\"\n"
  "FROM \"InBoundPayment\"\n"
  "LEFT JOIN \"Address\" AS \"receiveAddress\" ON \"receiveAddress\".\"id\"=\"InBoundPayment\".\"receiveAddress\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"InBoundPayment\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::table_name[] =
  "\"InBoundPayment\"";

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::pointer_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::object_type >
  access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // OutBoundPayment
  //

  const char alias_traits<  ::joystream::bitcoin::detail::store::Address,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::changeAddress_tag>::
  table_name[] = "\"changeAddress\"";

  struct access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  id (const id_image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::id_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = false;

    // fee_
    //
    t[1UL] = false;

    // amount_
    //
    t[2UL] = false;

    // note_
    //
    if (t[3UL])
    {
      i.note_value.capacity (i.note_size);
      grew = true;
    }

    // created_
    //
    t[4UL] = false;

    // toAddress_
    //
    if (t[5UL])
    {
      i.toAddress_value.capacity (i.toAddress_size);
      grew = true;
    }

    // changeAddress_
    //
    t[6UL] = false;

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_update)
    {
      b[n].type = sqlite::bind::integer;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // fee_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.fee_value;
    b[n].is_null = &i.fee_null;
    n++;

    // amount_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.amount_value;
    b[n].is_null = &i.amount_null;
    n++;

    // note_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.note_value.data ();
    b[n].size = &i.note_size;
    b[n].capacity = i.note_value.capacity ();
    b[n].is_null = &i.note_null;
    n++;

    // created_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.created_value;
    b[n].is_null = &i.created_null;
    n++;

    // toAddress_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.toAddress_value.data ();
    b[n].size = &i.toAddress_size;
    b[n].capacity = i.toAddress_value.capacity ();
    b[n].is_null = &i.toAddress_null;
    n++;

    // changeAddress_
    //
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.changeAddress_value;
    b[n].is_null = &i.changeAddress_null;
    n++;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = sqlite::bind::integer;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // id_
    //
    if (sk == statement_insert)
    {
      long unsigned int const& v =
        o.id_;

      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        v);
      i.id_null = is_null;
    }

    // fee_
    //
    {
      ::uint64_t const& v =
        o.fee_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.fee_value,
        is_null,
        v);
      i.fee_null = is_null;
    }

    // amount_
    //
    {
      ::uint64_t const& v =
        o.amount_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_image (
        i.amount_value,
        is_null,
        v);
      i.amount_null = is_null;
    }

    // note_
    //
    {
      ::std::string const& v =
        o.note_;

      bool is_null (false);
      std::size_t cap (i.note_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.note_value,
        i.note_size,
        is_null,
        v);
      i.note_null = is_null;
      grew = grew || (cap != i.note_value.capacity ());
    }

    // created_
    //
    {
      ::uint32_t const& v =
        o.created_;

      bool is_null (false);
      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_image (
        i.created_value,
        is_null,
        v);
      i.created_null = is_null;
    }

    // toAddress_
    //
    {
      ::std::string const& v =
        o.toAddress_;

      bool is_null (false);
      std::size_t cap (i.toAddress_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.toAddress_value,
        i.toAddress_size,
        is_null,
        v);
      i.toAddress_null = is_null;
      grew = grew || (cap != i.toAddress_value.capacity ());
    }

    // changeAddress_
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Address > const& v =
        o.changeAddress_;

      typedef object_traits< ::joystream::bitcoin::detail::store::Address > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Address > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_image (
          i.changeAddress_value,
          is_null,
          id);
        i.changeAddress_null = is_null;
      }
      else
        i.changeAddress_null = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // fee_
    //
    {
      ::uint64_t& v =
        o.fee_;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.fee_value,
        i.fee_null);
    }

    // amount_
    //
    {
      ::uint64_t& v =
        o.amount_;

      sqlite::value_traits<
          ::uint64_t,
          sqlite::id_integer >::set_value (
        v,
        i.amount_value,
        i.amount_null);
    }

    // note_
    //
    {
      ::std::string& v =
        o.note_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.note_value,
        i.note_size,
        i.note_null);
    }

    // created_
    //
    {
      ::uint32_t& v =
        o.created_;

      sqlite::value_traits<
          ::uint32_t,
          sqlite::id_integer >::set_value (
        v,
        i.created_value,
        i.created_null);
    }

    // toAddress_
    //
    {
      ::std::string& v =
        o.toAddress_;

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.toAddress_value,
        i.toAddress_size,
        i.toAddress_null);
    }

    // changeAddress_
    //
    {
      ::std::shared_ptr< ::joystream::bitcoin::detail::store::Address >& v =
        o.changeAddress_;

      typedef object_traits< ::joystream::bitcoin::detail::store::Address > obj_traits;
      typedef odb::pointer_traits< ::std::shared_ptr< ::joystream::bitcoin::detail::store::Address > > ptr_traits;

      if (i.changeAddress_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        sqlite::value_traits<
            obj_traits::id_type,
            sqlite::id_integer >::set_value (
          id,
          i.changeAddress_value,
          i.changeAddress_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<sqlite::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      sqlite::value_traits<
          long unsigned int,
          sqlite::id_integer >::set_image (
        i.id_value,
        is_null,
        id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::persist_statement[] =
  "INSERT INTO \"OutBoundPayment\" "
  "(\"id\", "
  "\"fee\", "
  "\"amount\", "
  "\"note\", "
  "\"created\", "
  "\"toAddress\", "
  "\"changeAddress\") "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::find_statement[] =
  "SELECT "
  "\"OutBoundPayment\".\"id\", "
  "\"OutBoundPayment\".\"fee\", "
  "\"OutBoundPayment\".\"amount\", "
  "\"OutBoundPayment\".\"note\", "
  "\"OutBoundPayment\".\"created\", "
  "\"OutBoundPayment\".\"toAddress\", "
  "\"OutBoundPayment\".\"changeAddress\" "
  "FROM \"OutBoundPayment\" "
  "WHERE \"OutBoundPayment\".\"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::update_statement[] =
  "UPDATE \"OutBoundPayment\" "
  "SET "
  "\"fee\"=?, "
  "\"amount\"=?, "
  "\"note\"=?, "
  "\"created\"=?, "
  "\"toAddress\"=?, "
  "\"changeAddress\"=? "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::erase_statement[] =
  "DELETE FROM \"OutBoundPayment\" "
  "WHERE \"id\"=?";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::query_statement[] =
  "SELECT\n"
  "\"OutBoundPayment\".\"id\",\n"
  "\"OutBoundPayment\".\"fee\",\n"
  "\"OutBoundPayment\".\"amount\",\n"
  "\"OutBoundPayment\".\"note\",\n"
  "\"OutBoundPayment\".\"created\",\n"
  "\"OutBoundPayment\".\"toAddress\",\n"
  "\"OutBoundPayment\".\"changeAddress\"\n"
  "FROM \"OutBoundPayment\"\n"
  "LEFT JOIN \"Address\" AS \"changeAddress\" ON \"changeAddress\".\"id\"=\"OutBoundPayment\".\"changeAddress\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"OutBoundPayment\"";

  const char access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::table_name[] =
  "\"OutBoundPayment\"";

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.id_null = true;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::pointer_type
  access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::object_type >
  access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += "\n";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        true,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // outputs_view_t
  //

  const char alias_traits<  ::joystream::bitcoin::detail::store::Address,
    id_sqlite,
    access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::address_tag>::
  table_name[] = "\"address\"";

  const char alias_traits<  ::joystream::bitcoin::detail::store::Transaction,
    id_sqlite,
    access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::output_tx_tag>::
  table_name[] = "\"output_tx\"";

  const char alias_traits<  ::joystream::bitcoin::detail::store::BlockHeader,
    id_sqlite,
    access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::output_block_tag>::
  table_name[] = "\"output_block\"";

  const char alias_traits<  ::joystream::bitcoin::detail::store::Transaction,
    id_sqlite,
    access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::spending_tx_tag>::
  table_name[] = "\"spending_tx\"";

  bool access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // output
    //
    if (object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::grow (
          i.output_value, t + 0UL))
      grew = true;

    return grew;
  }

  void access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i)
  {
    using namespace sqlite;

    sqlite::statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    std::size_t n (0);

    // output
    //
    object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::bind (
      b + n, i.output_value, sk);
    n += 3UL;
  }

  void access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::
  init (view_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    // output pre
    //
    typedef ::joystream::bitcoin::detail::store::Output output_object_type;
    typedef object_traits_impl<output_object_type, id_sqlite> output_object_traits;
    typedef output_object_traits::pointer_type output_pointer_type;
    typedef output_object_traits::pointer_traits output_pointer_traits;
    typedef output_object_traits::pointer_cache_traits output_cache_traits;

    output_object_traits::id_type output_id;
    output_pointer_type output_p;
    output_pointer_traits::guard output_pg;
    output_cache_traits::insert_guard output_ig;
    output_object_type* output_o (0);

    {
      if (!composite_value_traits< output_object_traits::id_type, id_sqlite >::get_null (
            i.output_value.id_value))
      {
        output_id = output_object_traits::id (i.output_value);
        output_p = output_cache_traits::find (*db, output_id);

        if (output_pointer_traits::null_ptr (output_p))
        {
          output_p = object_factory<output_object_type, output_pointer_type>::create ();
          output_pg.reset (output_p);
          output_ig.reset (output_cache_traits::insert (*db, output_id, output_p));
          output_o = output_pointer_traits::get_ptr (output_p);
        }
      }
    }

    // output
    //
    {
      if (output_o != 0)
      {
        output_object_traits::callback (*db, *output_o, callback_event::pre_load);
        output_object_traits::init (*output_o, i.output_value, db);
        output_object_traits::statements_type& sts (
          conn.statement_cache ().find_object<output_object_type> ());
        output_object_traits::load_ (sts, *output_o, false);
      }
    }

    // output post
    //
    {
      if (output_o != 0)
      {
        output_object_traits::callback (*db, *output_o, callback_event::post_load);
        output_cache_traits::load (output_ig.position ());
        output_ig.release ();
        output_pg.release ();
      }

      // If a compiler error points to the line below, then
      // it most likely means that a pointer used in view
      // member cannot be initialized from an object pointer.
      //
      o.output = ::std::shared_ptr< ::joystream::bitcoin::detail::store::Output > (
        std::move (output_p));
    }
  }

  access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::query_base_type
  access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::
  query_statement (const query_base_type& q)
  {
    query_base_type r (
      "SELECT "
      "\"Output\".\"id_value\", "
      "\"Output\".\"id_scriptPubKey\", "
      "\"Output\".\"address\" ");

    r += "FROM \"Output\"";

    r += " LEFT JOIN \"Address\" AS \"address\" ON";
    r += "\"Output\".\"address\"=\"address\".\"id\"";

    r += " LEFT JOIN \"TxHasOutput\" ON";
    r += "\"TxHasOutput\".\"output_value\"=\"Output\".\"id_value\"";
    r += "AND \"TxHasOutput\".\"output_scriptPubKey\"=\"Output\".\"id_scriptPubKey\"";

    r += " LEFT JOIN \"Transaction\" AS \"output_tx\" ON";
    r += "\"TxHasOutput\".\"tx_ix_tx\"=\"output_tx\".\"txid\"";

    r += " LEFT JOIN \"BlockHeader\" AS \"output_block\" ON";
    r += "\"output_tx\".\"header\"=\"output_block\".\"id\"";

    r += " LEFT JOIN \"Input\" ON";
    // From Schema.hpp:538:5
    r += query_columns::TxHasOutput::tx_ix.index == query_columns::Input::id.op_index && query_columns::TxHasOutput::tx_ix.tx == query_columns::Input::id.op_txid;

    r += " LEFT JOIN \"TxHasInput\" ON";
    r += "\"TxHasInput\".\"input_op_txid\"=\"Input\".\"id_op_txid\"";
    r += "AND \"TxHasInput\".\"input_op_index\"=\"Input\".\"id_op_index\"";
    r += "AND \"TxHasInput\".\"input_scriptSig\"=\"Input\".\"id_scriptSig\"";
    r += "AND \"TxHasInput\".\"input_sequence\"=\"Input\".\"id_sequence\"";

    r += " LEFT JOIN \"Transaction\" AS \"spending_tx\" ON";
    r += "\"TxHasInput\".\"tx_ix_tx\"=\"spending_tx\".\"txid\"";

    if (!q.empty ())
    {
      r += " ";
      r += q.clause_prefix ();
      r += q;
    }

    return r;
  }

  result< access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::view_type >
  access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_view<view_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.image_binding ());

    if (im.version != sts.image_version () || imb.version == 0)
    {
      bind (imb.bind, im);
      sts.image_version (im.version);
      imb.version++;
    }

    const query_base_type& qs (query_statement (q));
    qs.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        qs.clause (),
        false,
        true,
        qs.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::view_result_impl<view_type> > r (
      new (shared) sqlite::view_result_impl<view_type> (
        qs, st, sts, 0));

    return result<view_type> (r);
  }
}

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS \"OutBoundPayment\"");
          db.execute ("DROP TABLE IF EXISTS \"InBoundPayment\"");
          db.execute ("DROP TABLE IF EXISTS \"TxHasOutput\"");
          db.execute ("DROP TABLE IF EXISTS \"TxHasInput\"");
          db.execute ("DROP TABLE IF EXISTS \"Transaction\"");
          db.execute ("DROP TABLE IF EXISTS \"Input\"");
          db.execute ("DROP TABLE IF EXISTS \"Output\"");
          db.execute ("DROP TABLE IF EXISTS \"BlockHeader\"");
          db.execute ("DROP TABLE IF EXISTS \"Address\"");
          db.execute ("DROP TABLE IF EXISTS \"Key\"");
          db.execute ("DROP TABLE IF EXISTS \"Metadata\"");
          db.execute ("CREATE TABLE IF NOT EXISTS \"schema_version\" (\n"
                      "  \"name\" TEXT NOT NULL PRIMARY KEY,\n"
                      "  \"version\" INTEGER NOT NULL,\n"
                      "  \"migration\" INTEGER NOT NULL)");
          db.execute ("DELETE FROM \"schema_version\"\n"
                      "  WHERE \"name\" = ''");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"Metadata\" (\n"
                      "  \"seed\" TEXT NOT NULL,\n"
                      "  \"network\" INTEGER NOT NULL,\n"
                      "  \"created\" INTEGER NOT NULL)");
          db.execute ("CREATE TABLE \"Key\" (\n"
                      "  \"index\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"generated\" INTEGER NOT NULL,\n"
                      "  \"used\" INTEGER NOT NULL)");
          db.execute ("CREATE TABLE \"Address\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"address\" TEXT NOT NULL,\n"
                      "  \"key\" INTEGER NOT NULL,\n"
                      "  \"scriptPubKey\" TEXT NOT NULL,\n"
                      "  CONSTRAINT \"key_fk\"\n"
                      "    FOREIGN KEY (\"key\")\n"
                      "    REFERENCES \"Key\" (\"index\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE UNIQUE INDEX \"Address_key_i\"\n"
                      "  ON \"Address\" (\"key\")");
          db.execute ("CREATE TABLE \"BlockHeader\" (\n"
                      "  \"id\" TEXT NOT NULL PRIMARY KEY,\n"
                      "  \"height\" INTEGER NOT NULL)");
          db.execute ("CREATE TABLE \"Output\" (\n"
                      "  \"id_value\" INTEGER NOT NULL,\n"
                      "  \"id_scriptPubKey\" TEXT NOT NULL,\n"
                      "  \"address\" INTEGER NULL,\n"
                      "  PRIMARY KEY (\"id_value\",\n"
                      "               \"id_scriptPubKey\"),\n"
                      "  CONSTRAINT \"address_fk\"\n"
                      "    FOREIGN KEY (\"address\")\n"
                      "    REFERENCES \"Address\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE TABLE \"Input\" (\n"
                      "  \"id_op_txid\" TEXT NOT NULL,\n"
                      "  \"id_op_index\" INTEGER NOT NULL,\n"
                      "  \"id_scriptSig\" TEXT NOT NULL,\n"
                      "  \"id_sequence\" INTEGER NOT NULL,\n"
                      "  PRIMARY KEY (\"id_op_txid\",\n"
                      "               \"id_op_index\",\n"
                      "               \"id_scriptSig\",\n"
                      "               \"id_sequence\"))");
          db.execute ("CREATE TABLE \"Transaction\" (\n"
                      "  \"txid\" TEXT NOT NULL PRIMARY KEY,\n"
                      "  \"version\" INTEGER NOT NULL,\n"
                      "  \"lockTime\" INTEGER NOT NULL,\n"
                      "  \"header\" TEXT NULL,\n"
                      "  CONSTRAINT \"header_fk\"\n"
                      "    FOREIGN KEY (\"header\")\n"
                      "    REFERENCES \"BlockHeader\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE TABLE \"TxHasInput\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"tx_ix_tx\" TEXT NOT NULL,\n"
                      "  \"tx_ix_index\" INTEGER NOT NULL,\n"
                      "  \"input_op_txid\" TEXT NOT NULL,\n"
                      "  \"input_op_index\" INTEGER NOT NULL,\n"
                      "  \"input_scriptSig\" TEXT NOT NULL,\n"
                      "  \"input_sequence\" INTEGER NOT NULL,\n"
                      "  CONSTRAINT \"tx_ix_tx_fk\"\n"
                      "    FOREIGN KEY (\"tx_ix_tx\")\n"
                      "    REFERENCES \"Transaction\" (\"txid\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED,\n"
                      "  CONSTRAINT \"input_fk\"\n"
                      "    FOREIGN KEY (\"input_op_txid\",\n"
                      "                 \"input_op_index\",\n"
                      "                 \"input_scriptSig\",\n"
                      "                 \"input_sequence\")\n"
                      "    REFERENCES \"Input\" (\"id_op_txid\",\n"
                      "                        \"id_op_index\",\n"
                      "                        \"id_scriptSig\",\n"
                      "                        \"id_sequence\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE UNIQUE INDEX \"TxHasInput_tx_ix_i\"\n"
                      "  ON \"TxHasInput\" (\n"
                      "    \"tx_ix_tx\",\n"
                      "    \"tx_ix_index\")");
          db.execute ("CREATE TABLE \"TxHasOutput\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"tx_ix_tx\" TEXT NOT NULL,\n"
                      "  \"tx_ix_index\" INTEGER NOT NULL,\n"
                      "  \"output_value\" INTEGER NOT NULL,\n"
                      "  \"output_scriptPubKey\" TEXT NOT NULL,\n"
                      "  CONSTRAINT \"tx_ix_tx_fk\"\n"
                      "    FOREIGN KEY (\"tx_ix_tx\")\n"
                      "    REFERENCES \"Transaction\" (\"txid\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED,\n"
                      "  CONSTRAINT \"output_fk\"\n"
                      "    FOREIGN KEY (\"output_value\",\n"
                      "                 \"output_scriptPubKey\")\n"
                      "    REFERENCES \"Output\" (\"id_value\",\n"
                      "                         \"id_scriptPubKey\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE UNIQUE INDEX \"TxHasOutput_tx_ix_i\"\n"
                      "  ON \"TxHasOutput\" (\n"
                      "    \"tx_ix_tx\",\n"
                      "    \"tx_ix_index\")");
          db.execute ("CREATE TABLE \"InBoundPayment\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"created\" INTEGER NOT NULL,\n"
                      "  \"note\" TEXT NOT NULL,\n"
                      "  \"receiveAddress\" INTEGER NULL,\n"
                      "  CONSTRAINT \"receiveAddress_fk\"\n"
                      "    FOREIGN KEY (\"receiveAddress\")\n"
                      "    REFERENCES \"Address\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          db.execute ("CREATE TABLE \"OutBoundPayment\" (\n"
                      "  \"id\" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n"
                      "  \"fee\" INTEGER NOT NULL,\n"
                      "  \"amount\" INTEGER NOT NULL,\n"
                      "  \"note\" TEXT NOT NULL,\n"
                      "  \"created\" INTEGER NOT NULL,\n"
                      "  \"toAddress\" TEXT NOT NULL,\n"
                      "  \"changeAddress\" INTEGER NULL,\n"
                      "  CONSTRAINT \"changeAddress_fk\"\n"
                      "    FOREIGN KEY (\"changeAddress\")\n"
                      "    REFERENCES \"Address\" (\"id\")\n"
                      "    DEFERRABLE INITIALLY DEFERRED)");
          return true;
        }
        case 2:
        {
          db.execute ("CREATE TABLE IF NOT EXISTS \"schema_version\" (\n"
                      "  \"name\" TEXT NOT NULL PRIMARY KEY,\n"
                      "  \"version\" INTEGER NOT NULL,\n"
                      "  \"migration\" INTEGER NOT NULL)");
          db.execute ("INSERT OR IGNORE INTO \"schema_version\" (\n"
                      "  \"name\", \"version\", \"migration\")\n"
                      "  VALUES ('', 1, 0)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_sqlite,
    "",
    &create_schema);

  static const schema_catalog_migrate_entry
  migrate_schema_entry_1_ (
    id_sqlite,
    "",
    1ULL,
    0);
}

#include <odb/post.hxx>
