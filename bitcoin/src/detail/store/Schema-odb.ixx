// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // Metadata
  //

  inline
  access::object_traits< ::joystream::bitcoin::detail::store::Metadata >::id_type
  access::object_traits< ::joystream::bitcoin::detail::store::Metadata >::
  id (const object_type&)
  {
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::Metadata >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::Metadata >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Key
  //

  inline
  access::object_traits< ::joystream::bitcoin::detail::store::Key >::id_type
  access::object_traits< ::joystream::bitcoin::detail::store::Key >::
  id (const object_type& o)
  {
    return o.index_;
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::Key >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::Key >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Address
  //

  inline
  access::object_traits< ::joystream::bitcoin::detail::store::Address >::id_type
  access::object_traits< ::joystream::bitcoin::detail::store::Address >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::Address >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::Address >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // BlockHeader
  //

  inline
  access::object_traits< ::joystream::bitcoin::detail::store::BlockHeader >::id_type
  access::object_traits< ::joystream::bitcoin::detail::store::BlockHeader >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::BlockHeader >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::BlockHeader >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Output
  //

  inline
  access::object_traits< ::joystream::bitcoin::detail::store::Output >::id_type
  access::object_traits< ::joystream::bitcoin::detail::store::Output >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::Output >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::Output >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Input
  //

  inline
  access::object_traits< ::joystream::bitcoin::detail::store::Input >::id_type
  access::object_traits< ::joystream::bitcoin::detail::store::Input >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::Input >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::Input >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Transaction
  //

  inline
  access::object_traits< ::joystream::bitcoin::detail::store::Transaction >::id_type
  access::object_traits< ::joystream::bitcoin::detail::store::Transaction >::
  id (const object_type& o)
  {
    return o.txid_;
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::Transaction >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::Transaction >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // TxHasInput
  //

  inline
  access::object_traits< ::joystream::bitcoin::detail::store::TxHasInput >::id_type
  access::object_traits< ::joystream::bitcoin::detail::store::TxHasInput >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::TxHasInput >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::TxHasInput >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // TxHasOutput
  //

  inline
  access::object_traits< ::joystream::bitcoin::detail::store::TxHasOutput >::id_type
  access::object_traits< ::joystream::bitcoin::detail::store::TxHasOutput >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::TxHasOutput >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::TxHasOutput >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // transaction_stat_t
  //

  inline
  void access::view_traits< ::joystream::bitcoin::detail::store::transaction_stat_t >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // key_stat_t
  //

  inline
  void access::view_traits< ::joystream::bitcoin::detail::store::key_stat_t >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // key_view_t
  //

  inline
  void access::view_traits< ::joystream::bitcoin::detail::store::key_view_t >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // InBoundPayment
  //

  inline
  access::object_traits< ::joystream::bitcoin::detail::store::InBoundPayment >::id_type
  access::object_traits< ::joystream::bitcoin::detail::store::InBoundPayment >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::InBoundPayment >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::InBoundPayment >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // OutBoundPayment
  //

  inline
  access::object_traits< ::joystream::bitcoin::detail::store::OutBoundPayment >::id_type
  access::object_traits< ::joystream::bitcoin::detail::store::OutBoundPayment >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::OutBoundPayment >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::joystream::bitcoin::detail::store::OutBoundPayment >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // outputs_view_t
  //

  inline
  void access::view_traits< ::joystream::bitcoin::detail::store::outputs_view_t >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

namespace odb
{
  // Metadata
  //

  // Key
  //

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Address
  //

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // BlockHeader
  //

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Output_id
  //

  inline
  bool access::composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.value_null;
    r = r && i.scriptPubKey_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::
  set_null (image_type& i,
            sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    i.value_null = true;
    i.scriptPubKey_null = true;
  }

  // Output
  //

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Input_id
  //

  inline
  bool access::composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.op_txid_null;
    r = r && i.op_index_null;
    r = r && i.scriptSig_null;
    r = r && i.sequence_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::
  set_null (image_type& i,
            sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    i.op_txid_null = true;
    i.op_index_null = true;
    i.scriptSig_null = true;
    i.sequence_null = true;
  }

  // Input
  //

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Transaction
  //

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // tx_ix_t
  //

  inline
  bool access::composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.tx_null;
    r = r && i.index_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::
  set_null (image_type& i,
            sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    i.tx_null = true;
    i.index_null = true;
  }

  // TxHasInput
  //

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // TxHasOutput
  //

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // transaction_stat_t
  //

  // key_stat_t
  //

  // key_view_t
  //

  // InBoundPayment
  //

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // OutBoundPayment
  //

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // outputs_view_t
  //
}

