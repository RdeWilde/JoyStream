// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef SCHEMA_ODB_HXX
#define SCHEMA_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "Schema.hpp"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/no-id-object-result.hxx>
#include <odb/view-image.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Metadata
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::Metadata >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::joystream::bitcoin::detail::store::Metadata >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::Metadata object_type;
    typedef ::std::shared_ptr< ::joystream::bitcoin::detail::store::Metadata > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef void id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_id_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_id_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Key
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::Key >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::joystream::bitcoin::detail::store::Key >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::Key object_type;
    typedef ::std::shared_ptr< ::joystream::bitcoin::detail::store::Key > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint32_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Address
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::Address >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::joystream::bitcoin::detail::store::Address >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::Address object_type;
    typedef ::std::shared_ptr< ::joystream::bitcoin::detail::store::Address > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // BlockHeader
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::BlockHeader >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::joystream::bitcoin::detail::store::BlockHeader >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::BlockHeader object_type;
    typedef ::std::shared_ptr< ::joystream::bitcoin::detail::store::BlockHeader > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::string id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Output
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::Output >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::joystream::bitcoin::detail::store::Output >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::Output object_type;
    typedef ::std::shared_ptr< ::joystream::bitcoin::detail::store::Output > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::joystream::bitcoin::detail::store::Output_id id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Input
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::Input >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::joystream::bitcoin::detail::store::Input >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::Input object_type;
    typedef ::std::shared_ptr< ::joystream::bitcoin::detail::store::Input > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::joystream::bitcoin::detail::store::Input_id id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Transaction
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::Transaction >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::joystream::bitcoin::detail::store::Transaction >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::Transaction object_type;
    typedef ::std::shared_ptr< ::joystream::bitcoin::detail::store::Transaction > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::string id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // TxHasInput
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::TxHasInput >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::joystream::bitcoin::detail::store::TxHasInput >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::TxHasInput object_type;
    typedef ::std::shared_ptr< ::joystream::bitcoin::detail::store::TxHasInput > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // TxHasOutput
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::TxHasOutput >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::joystream::bitcoin::detail::store::TxHasOutput >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::TxHasOutput object_type;
    typedef ::std::shared_ptr< ::joystream::bitcoin::detail::store::TxHasOutput > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // transaction_stat_t
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::transaction_stat_t >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::joystream::bitcoin::detail::store::transaction_stat_t >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::transaction_stat_t view_type;
    typedef ::joystream::bitcoin::detail::store::transaction_stat_t* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // key_stat_t
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::key_stat_t >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::joystream::bitcoin::detail::store::key_stat_t >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::key_stat_t view_type;
    typedef ::joystream::bitcoin::detail::store::key_stat_t* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // key_view_t
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::key_view_t >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::joystream::bitcoin::detail::store::key_view_t >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::key_view_t view_type;
    typedef ::joystream::bitcoin::detail::store::key_view_t* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // InBoundPayment
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::InBoundPayment >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::joystream::bitcoin::detail::store::InBoundPayment >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::InBoundPayment object_type;
    typedef ::std::shared_ptr< ::joystream::bitcoin::detail::store::InBoundPayment > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // OutBoundPayment
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::OutBoundPayment >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::joystream::bitcoin::detail::store::OutBoundPayment >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::OutBoundPayment object_type;
    typedef ::std::shared_ptr< ::joystream::bitcoin::detail::store::OutBoundPayment > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // outputs_view_t
  //
  template <>
  struct class_traits< ::joystream::bitcoin::detail::store::outputs_view_t >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::joystream::bitcoin::detail::store::outputs_view_t >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::outputs_view_t view_type;
    typedef ::joystream::bitcoin::detail::store::outputs_view_t* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // Metadata
  //
  template <typename A>
  struct query_columns< ::joystream::bitcoin::detail::store::Metadata, id_sqlite, A >
  {
    // seed
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    seed_type_;

    static const seed_type_ seed;

    // network
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::Coin::Network,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    network_type_;

    static const network_type_ network;

    // created
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    created_type_;

    static const created_type_ created;
  };

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Metadata, id_sqlite, A >::seed_type_
  query_columns< ::joystream::bitcoin::detail::store::Metadata, id_sqlite, A >::
  seed (A::table_name, "\"seed\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Metadata, id_sqlite, A >::network_type_
  query_columns< ::joystream::bitcoin::detail::store::Metadata, id_sqlite, A >::
  network (A::table_name, "\"network\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Metadata, id_sqlite, A >::created_type_
  query_columns< ::joystream::bitcoin::detail::store::Metadata, id_sqlite, A >::
  created (A::table_name, "\"created\"", 0);

  template <typename A>
  struct pointer_query_columns< ::joystream::bitcoin::detail::store::Metadata, id_sqlite, A >:
    query_columns< ::joystream::bitcoin::detail::store::Metadata, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >:
    public access::object_traits< ::joystream::bitcoin::detail::store::Metadata >
  {
    public:
    struct image_type
    {
      // seed_
      //
      details::buffer seed_value;
      std::size_t seed_size;
      bool seed_null;

      // network_
      //
      long long network_value;
      bool network_null;

      // created_
      //
      long long created_value;
      bool created_null;

      std::size_t version;
    };

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    typedef sqlite::no_id_object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 0UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_common >:
    public access::object_traits_impl< ::joystream::bitcoin::detail::store::Metadata, id_sqlite >
  {
  };

  // Key
  //
  template <typename A>
  struct query_columns< ::joystream::bitcoin::detail::store::Key, id_sqlite, A >
  {
    // index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    index_type_;

    static const index_type_ index;

    // generated
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    generated_type_;

    static const generated_type_ generated;

    // used
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    used_type_;

    static const used_type_ used;
  };

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Key, id_sqlite, A >::index_type_
  query_columns< ::joystream::bitcoin::detail::store::Key, id_sqlite, A >::
  index (A::table_name, "\"index\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Key, id_sqlite, A >::generated_type_
  query_columns< ::joystream::bitcoin::detail::store::Key, id_sqlite, A >::
  generated (A::table_name, "\"generated\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Key, id_sqlite, A >::used_type_
  query_columns< ::joystream::bitcoin::detail::store::Key, id_sqlite, A >::
  used (A::table_name, "\"used\"", 0);

  template <typename A>
  struct pointer_query_columns< ::joystream::bitcoin::detail::store::Key, id_sqlite, A >:
    query_columns< ::joystream::bitcoin::detail::store::Key, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >:
    public access::object_traits< ::joystream::bitcoin::detail::store::Key >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // index_
      //
      long long index_value;
      bool index_null;

      // generated_
      //
      long long generated_value;
      bool generated_null;

      // used_
      //
      long long used_value;
      bool used_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_common >:
    public access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >
  {
  };

  // Address
  //
  template <typename A>
  struct pointer_query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // address
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    address_type_;

    static const address_type_ address;

    // key
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    key_type_;

    static const key_type_ key;

    // scriptPubKey
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    scriptPubKey_type_;

    static const scriptPubKey_type_ scriptPubKey;
  };

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::id_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::address_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::
  address (A::table_name, "\"address\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::key_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::
  key (A::table_name, "\"key\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::scriptPubKey_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::
  scriptPubKey (A::table_name, "\"scriptPubKey\"", 0);

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >:
    public access::object_traits< ::joystream::bitcoin::detail::store::Address >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // address_
      //
      details::buffer address_value;
      std::size_t address_size;
      bool address_null;

      // key_
      //
      long long key_value;
      bool key_null;

      // scriptPubKey_
      //
      details::buffer scriptPubKey_value;
      std::size_t scriptPubKey_size;
      bool scriptPubKey_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct key_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_common >:
    public access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >
  {
  };

  // BlockHeader
  //
  template <typename A>
  struct query_columns< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    id_type_;

    static const id_type_ id;

    // height
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    height_type_;

    static const height_type_ height;
  };

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite, A >::id_type_
  query_columns< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite, A >::height_type_
  query_columns< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite, A >::
  height (A::table_name, "\"height\"", 0);

  template <typename A>
  struct pointer_query_columns< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite, A >:
    query_columns< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >:
    public access::object_traits< ::joystream::bitcoin::detail::store::BlockHeader >
  {
    public:
    struct id_image_type
    {
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      // height_
      //
      long long height_value;
      bool height_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 1UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_common >:
    public access::object_traits_impl< ::joystream::bitcoin::detail::store::BlockHeader, id_sqlite >
  {
  };

  // Output_id
  //
  template <>
  class access::composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::Output_id value_type;

    struct image_type
    {
      // value_
      //
      long long value_value;
      bool value_null;

      // scriptPubKey_
      //
      details::buffer scriptPubKey_value;
      std::size_t scriptPubKey_size;
      bool scriptPubKey_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          sqlite::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              sqlite::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // Output
  //
  template <typename A>
  struct pointer_query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >
  {
    // id
    //
    struct id_class_
    {
      id_class_ ()
      {
      }

      // value
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          long long unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      value_type_;

      static const value_type_ value;

      // scriptPubKey
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      scriptPubKey_type_;

      static const scriptPubKey_type_ scriptPubKey;
    };

    static const id_class_ id;

    // address
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    address_type_;

    static const address_type_ address;
  };

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::id_class_::value_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::id_class_::
  value (A::table_name, "\"id_value\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::id_class_::scriptPubKey_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::id_class_::
  scriptPubKey (A::table_name, "\"id_scriptPubKey\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::id_class_
  pointer_query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::id;

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::address_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::
  address (A::table_name, "\"address\"", 0);

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >:
    public access::object_traits< ::joystream::bitcoin::detail::store::Output >
  {
    public:
    struct id_image_type
    {
      composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::image_type id_value;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::image_type id_value;

      // address_
      //
      long long address_value;
      bool address_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct address_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 2UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_common >:
    public access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >
  {
  };

  // Input_id
  //
  template <>
  class access::composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::Input_id value_type;

    struct image_type
    {
      // op_txid_
      //
      details::buffer op_txid_value;
      std::size_t op_txid_size;
      bool op_txid_null;

      // op_index_
      //
      long long op_index_value;
      bool op_index_null;

      // scriptSig_
      //
      details::buffer scriptSig_value;
      std::size_t scriptSig_size;
      bool scriptSig_null;

      // sequence_
      //
      long long sequence_value;
      bool sequence_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          sqlite::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              sqlite::statement_kind);

    static const std::size_t column_count = 4UL;
  };

  // Input
  //
  template <typename A>
  struct query_columns< ::joystream::bitcoin::detail::store::Input, id_sqlite, A >
  {
    // id
    //
    struct id_class_
    {
      id_class_ ()
      {
      }

      // op_txid
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      op_txid_type_;

      static const op_txid_type_ op_txid;

      // op_index
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      op_index_type_;

      static const op_index_type_ op_index;

      // scriptSig
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      scriptSig_type_;

      static const scriptSig_type_ scriptSig;

      // sequence
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      sequence_type_;

      static const sequence_type_ sequence;
    };

    static const id_class_ id;
  };

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Input, id_sqlite, A >::id_class_::op_txid_type_
  query_columns< ::joystream::bitcoin::detail::store::Input, id_sqlite, A >::id_class_::
  op_txid (A::table_name, "\"id_op_txid\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Input, id_sqlite, A >::id_class_::op_index_type_
  query_columns< ::joystream::bitcoin::detail::store::Input, id_sqlite, A >::id_class_::
  op_index (A::table_name, "\"id_op_index\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Input, id_sqlite, A >::id_class_::scriptSig_type_
  query_columns< ::joystream::bitcoin::detail::store::Input, id_sqlite, A >::id_class_::
  scriptSig (A::table_name, "\"id_scriptSig\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Input, id_sqlite, A >::id_class_::sequence_type_
  query_columns< ::joystream::bitcoin::detail::store::Input, id_sqlite, A >::id_class_::
  sequence (A::table_name, "\"id_sequence\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Input, id_sqlite, A >::id_class_
  query_columns< ::joystream::bitcoin::detail::store::Input, id_sqlite, A >::id;

  template <typename A>
  struct pointer_query_columns< ::joystream::bitcoin::detail::store::Input, id_sqlite, A >:
    query_columns< ::joystream::bitcoin::detail::store::Input, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >:
    public access::object_traits< ::joystream::bitcoin::detail::store::Input >
  {
    public:
    struct id_image_type
    {
      composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::image_type id_value;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::image_type id_value;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 4UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_common >:
    public access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite >
  {
  };

  // Transaction
  //
  template <typename A>
  struct pointer_query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >
  {
    // txid
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    txid_type_;

    static const txid_type_ txid;

    // version
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    version_type_;

    static const version_type_ version;

    // lockTime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    lockTime_type_;

    static const lockTime_type_ lockTime;

    // header
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    header_type_;

    static const header_type_ header;
  };

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::txid_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::
  txid (A::table_name, "\"txid\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::version_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::
  version (A::table_name, "\"version\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::lockTime_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::
  lockTime (A::table_name, "\"lockTime\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::header_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::
  header (A::table_name, "\"header\"", 0);

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >:
    public access::object_traits< ::joystream::bitcoin::detail::store::Transaction >
  {
    public:
    struct id_image_type
    {
      details::buffer id_value;
      std::size_t id_size;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // txid_
      //
      details::buffer txid_value;
      std::size_t txid_size;
      bool txid_null;

      // version_
      //
      long long version_value;
      bool version_null;

      // lockTime_
      //
      long long lockTime_value;
      bool lockTime_null;

      // header_
      //
      details::buffer header_value;
      std::size_t header_size;
      bool header_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct header_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 2UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_common >:
    public access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >
  {
  };

  // tx_ix_t
  //
  template <>
  class access::composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >
  {
    public:
    typedef ::joystream::bitcoin::detail::store::tx_ix_t value_type;

    struct image_type
    {
      // tx
      //
      details::buffer tx_value;
      std::size_t tx_size;
      bool tx_null;

      // index_
      //
      long long index_value;
      bool index_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          sqlite::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              sqlite::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // TxHasInput
  //
  template <typename A>
  struct pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // tx_ix
    //
    struct tx_ix_class_
    {
      tx_ix_class_ ()
      {
      }

      // tx
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      tx_type_;

      static const tx_type_ tx;

      // index
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      index_type_;

      static const index_type_ index;
    };

    static const tx_ix_class_ tx_ix;

    // input
    //
    struct input_class_
    {
      input_class_ ()
      {
      }

      // op_txid
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      op_txid_type_;

      static const op_txid_type_ op_txid;

      // op_index
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      op_index_type_;

      static const op_index_type_ op_index;

      // scriptSig
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      scriptSig_type_;

      static const scriptSig_type_ scriptSig;

      // sequence
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      sequence_type_;

      static const sequence_type_ sequence;
    };

    static const input_class_ input;
  };

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::id_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::tx_ix_class_::tx_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::tx_ix_class_::
  tx (A::table_name, "\"tx_ix_tx\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::tx_ix_class_::index_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::tx_ix_class_::
  index (A::table_name, "\"tx_ix_index\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::tx_ix_class_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::tx_ix;

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_class_::op_txid_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_class_::
  op_txid (A::table_name, "\"input_op_txid\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_class_::op_index_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_class_::
  op_index (A::table_name, "\"input_op_index\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_class_::scriptSig_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_class_::
  scriptSig (A::table_name, "\"input_scriptSig\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_class_::sequence_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_class_::
  sequence (A::table_name, "\"input_sequence\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_class_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input;

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >:
    public access::object_traits< ::joystream::bitcoin::detail::store::TxHasInput >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // tx_ix_
      //
      composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::image_type tx_ix_value;

      // input_
      //
      composite_value_traits< ::joystream::bitcoin::detail::store::Input_id, id_sqlite >::image_type input_value;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct tx_ix_tag
    {
      struct tx_tag;
    };

    struct input_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 6UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_common >:
    public access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >
  {
  };

  // TxHasOutput
  //
  template <typename A>
  struct pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // tx_ix
    //
    struct tx_ix_class_
    {
      tx_ix_class_ ()
      {
      }

      // tx
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      tx_type_;

      static const tx_type_ tx;

      // index
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      index_type_;

      static const index_type_ index;
    };

    static const tx_ix_class_ tx_ix;

    // output
    //
    struct output_class_
    {
      output_class_ ()
      {
      }

      // value
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          long long unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      value_type_;

      static const value_type_ value;

      // scriptPubKey
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      scriptPubKey_type_;

      static const scriptPubKey_type_ scriptPubKey;
    };

    static const output_class_ output;
  };

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::id_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::tx_ix_class_::tx_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::tx_ix_class_::
  tx (A::table_name, "\"tx_ix_tx\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::tx_ix_class_::index_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::tx_ix_class_::
  index (A::table_name, "\"tx_ix_index\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::tx_ix_class_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::tx_ix;

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::output_class_::value_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::output_class_::
  value (A::table_name, "\"output_value\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::output_class_::scriptPubKey_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::output_class_::
  scriptPubKey (A::table_name, "\"output_scriptPubKey\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::output_class_
  pointer_query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::output;

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >:
    public access::object_traits< ::joystream::bitcoin::detail::store::TxHasOutput >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // tx_ix_
      //
      composite_value_traits< ::joystream::bitcoin::detail::store::tx_ix_t, id_sqlite >::image_type tx_ix_value;

      // output_
      //
      composite_value_traits< ::joystream::bitcoin::detail::store::Output_id, id_sqlite >::image_type output_value;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct tx_ix_tag
    {
      struct tx_tag;
    };

    struct output_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 4UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_common >:
    public access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >
  {
  };

  // transaction_stat_t
  //
  template <>
  class access::view_traits_impl< ::joystream::bitcoin::detail::store::transaction_stat_t, id_sqlite >:
    public access::view_traits< ::joystream::bitcoin::detail::store::transaction_stat_t >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::joystream::bitcoin::detail::store::transaction_stat_t, id_common >:
    public access::view_traits_impl< ::joystream::bitcoin::detail::store::transaction_stat_t, id_sqlite >
  {
  };

  // key_stat_t
  //
  template <>
  class access::view_traits_impl< ::joystream::bitcoin::detail::store::key_stat_t, id_sqlite >:
    public access::view_traits< ::joystream::bitcoin::detail::store::key_stat_t >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      // max
      //
      long long max_value;
      bool max_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 2UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::joystream::bitcoin::detail::store::key_stat_t, id_common >:
    public access::view_traits_impl< ::joystream::bitcoin::detail::store::key_stat_t, id_sqlite >
  {
  };

  // key_view_t
  //
  template <>
  class access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >:
    public access::view_traits< ::joystream::bitcoin::detail::store::key_view_t >
  {
    public:
    struct image_type
    {
      // key
      //
      object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite >::image_type key_value;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    struct key_tag;
    struct address_tag;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 3UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_common >:
    public access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >
  {
  };

  // InBoundPayment
  //
  template <typename A>
  struct pointer_query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // created
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    created_type_;

    static const created_type_ created;

    // note
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    note_type_;

    static const note_type_ note;

    // receiveAddress
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    receiveAddress_type_;

    static const receiveAddress_type_ receiveAddress;
  };

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::id_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::created_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::
  created (A::table_name, "\"created\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::note_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::
  note (A::table_name, "\"note\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::receiveAddress_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::
  receiveAddress (A::table_name, "\"receiveAddress\"", 0);

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >:
    public access::object_traits< ::joystream::bitcoin::detail::store::InBoundPayment >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // created_
      //
      long long created_value;
      bool created_null;

      // note_
      //
      details::buffer note_value;
      std::size_t note_size;
      bool note_null;

      // receiveAddress_
      //
      long long receiveAddress_value;
      bool receiveAddress_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct receiveAddress_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_common >:
    public access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >
  {
  };

  // OutBoundPayment
  //
  template <typename A>
  struct pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // fee
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    fee_type_;

    static const fee_type_ fee;

    // amount
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    amount_type_;

    static const amount_type_ amount;

    // note
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    note_type_;

    static const note_type_ note;

    // created
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    created_type_;

    static const created_type_ created;

    // toAddress
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    toAddress_type_;

    static const toAddress_type_ toAddress;

    // changeAddress
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    changeAddress_type_;

    static const changeAddress_type_ changeAddress;
  };

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::id_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::fee_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  fee (A::table_name, "\"fee\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::amount_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  amount (A::table_name, "\"amount\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::note_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  note (A::table_name, "\"note\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::created_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  created (A::table_name, "\"created\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::toAddress_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  toAddress (A::table_name, "\"toAddress\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::changeAddress_type_
  pointer_query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  changeAddress (A::table_name, "\"changeAddress\"", 0);

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >:
    public access::object_traits< ::joystream::bitcoin::detail::store::OutBoundPayment >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // fee_
      //
      long long fee_value;
      bool fee_null;

      // amount_
      //
      long long amount_value;
      bool amount_null;

      // note_
      //
      details::buffer note_value;
      std::size_t note_size;
      bool note_null;

      // created_
      //
      long long created_value;
      bool created_null;

      // toAddress_
      //
      details::buffer toAddress_value;
      std::size_t toAddress_size;
      bool toAddress_null;

      // changeAddress_
      //
      long long changeAddress_value;
      bool changeAddress_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct changeAddress_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_common >:
    public access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >
  {
  };

  // outputs_view_t
  //
  template <>
  class access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >:
    public access::view_traits< ::joystream::bitcoin::detail::store::outputs_view_t >
  {
    public:
    struct image_type
    {
      // output
      //
      object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::image_type output_value;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    struct address_tag;
    struct output_tx_tag;
    struct output_block_tag;
    struct spending_tx_tag;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 3UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_common >:
    public access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >
  {
  };

  // Metadata
  //
  // Key
  //
  // Address
  //
  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::Key,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::key_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::joystream::bitcoin::detail::store::Address, id_sqlite >
  {
    // key
    //
    typedef
    odb::alias_traits<
      ::joystream::bitcoin::detail::store::Key,
      id_sqlite,
      access::object_traits_impl< ::joystream::bitcoin::detail::store::Address, id_sqlite >::key_tag>
    key_alias_;
  };

  template <typename A>
  struct query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >:
    query_columns_base< ::joystream::bitcoin::detail::store::Address, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // address
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    address_type_;

    static const address_type_ address;

    // key
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    key_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::joystream::bitcoin::detail::store::Key,
        id_sqlite,
        key_alias_ > >
    key_pointer_type_;

    struct key_type_: key_pointer_type_, key_column_type_
    {
      key_type_ (const char* t, const char* c, const char* conv)
        : key_column_type_ (t, c, conv)
      {
      }
    };

    static const key_type_ key;

    // scriptPubKey
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    scriptPubKey_type_;

    static const scriptPubKey_type_ scriptPubKey;
  };

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::id_type_
  query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::address_type_
  query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::
  address (A::table_name, "\"address\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::key_type_
  query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::
  key (A::table_name, "\"key\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::scriptPubKey_type_
  query_columns< ::joystream::bitcoin::detail::store::Address, id_sqlite, A >::
  scriptPubKey (A::table_name, "\"scriptPubKey\"", 0);

  // BlockHeader
  //
  // Output
  //
  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::Address,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::address_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::joystream::bitcoin::detail::store::Output, id_sqlite >
  {
    // address
    //
    typedef
    odb::alias_traits<
      ::joystream::bitcoin::detail::store::Address,
      id_sqlite,
      access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite >::address_tag>
    address_alias_;
  };

  template <typename A>
  struct query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >:
    query_columns_base< ::joystream::bitcoin::detail::store::Output, id_sqlite >
  {
    // id
    //
    struct id_class_
    {
      id_class_ ()
      {
      }

      // value
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          long long unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      value_type_;

      static const value_type_ value;

      // scriptPubKey
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      scriptPubKey_type_;

      static const scriptPubKey_type_ scriptPubKey;
    };

    static const id_class_ id;

    // address
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    address_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::joystream::bitcoin::detail::store::Address,
        id_sqlite,
        address_alias_ > >
    address_pointer_type_;

    struct address_type_: address_pointer_type_, address_column_type_
    {
      address_type_ (const char* t, const char* c, const char* conv)
        : address_column_type_ (t, c, conv)
      {
      }
    };

    static const address_type_ address;
  };

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::id_class_::value_type_
  query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::id_class_::
  value (A::table_name, "\"id_value\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::id_class_::scriptPubKey_type_
  query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::id_class_::
  scriptPubKey (A::table_name, "\"id_scriptPubKey\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::id_class_
  query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::id;

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::address_type_
  query_columns< ::joystream::bitcoin::detail::store::Output, id_sqlite, A >::
  address (A::table_name, "\"address\"", 0);

  // Input
  //
  // Transaction
  //
  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::BlockHeader,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::header_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >
  {
    // header
    //
    typedef
    odb::alias_traits<
      ::joystream::bitcoin::detail::store::BlockHeader,
      id_sqlite,
      access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >::header_tag>
    header_alias_;
  };

  template <typename A>
  struct query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >:
    query_columns_base< ::joystream::bitcoin::detail::store::Transaction, id_sqlite >
  {
    // txid
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    txid_type_;

    static const txid_type_ txid;

    // version
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    version_type_;

    static const version_type_ version;

    // lockTime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    lockTime_type_;

    static const lockTime_type_ lockTime;

    // header
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    header_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::joystream::bitcoin::detail::store::BlockHeader,
        id_sqlite,
        header_alias_ > >
    header_pointer_type_;

    struct header_type_: header_pointer_type_, header_column_type_
    {
      header_type_ (const char* t, const char* c, const char* conv)
        : header_column_type_ (t, c, conv)
      {
      }
    };

    static const header_type_ header;
  };

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::txid_type_
  query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::
  txid (A::table_name, "\"txid\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::version_type_
  query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::
  version (A::table_name, "\"version\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::lockTime_type_
  query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::
  lockTime (A::table_name, "\"lockTime\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::header_type_
  query_columns< ::joystream::bitcoin::detail::store::Transaction, id_sqlite, A >::
  header (A::table_name, "\"header\"", 0);

  // TxHasInput
  //
  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::Transaction,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::tx_ix_tag::tx_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::Input,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::input_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >
  {
    // tx_ix
    //
    struct tx_ix_base_
    {
      // tx
      //
      typedef
      odb::alias_traits<
        ::joystream::bitcoin::detail::store::Transaction,
        id_sqlite,
        access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::tx_ix_tag::tx_tag>
      tx_alias_;
    };

    // input
    //
    typedef
    odb::alias_traits<
      ::joystream::bitcoin::detail::store::Input,
      id_sqlite,
      access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >::input_tag>
    input_alias_;
  };

  template <typename A>
  struct query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >:
    query_columns_base< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // tx_ix
    //
    struct tx_ix_class_: tx_ix_base_
    {
      tx_ix_class_ ()
      {
      }

      // tx
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      tx_column_type_;

      typedef
      odb::query_pointer<
        odb::pointer_query_columns<
          ::joystream::bitcoin::detail::store::Transaction,
          id_sqlite,
          tx_alias_ > >
      tx_pointer_type_;

      struct tx_type_: tx_pointer_type_, tx_column_type_
      {
        tx_type_ (const char* t, const char* c, const char* conv)
          : tx_column_type_ (t, c, conv)
        {
        }
      };

      static const tx_type_ tx;

      // index
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      index_type_;

      static const index_type_ index;
    };

    static const tx_ix_class_ tx_ix;

    // input
    //
    struct input_column_class_
    {
      input_column_class_ ()
      {
      }

      // op_txid
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      op_txid_type_;

      static const op_txid_type_ op_txid;

      // op_index
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      op_index_type_;

      static const op_index_type_ op_index;

      // scriptSig
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      scriptSig_type_;

      static const scriptSig_type_ scriptSig;

      // sequence
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      sequence_type_;

      static const sequence_type_ sequence;
    };

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::joystream::bitcoin::detail::store::Input,
        id_sqlite,
        input_alias_ > >
    input_pointer_type_;

    struct input_type_: input_pointer_type_, input_column_class_
    {
      input_type_ ()
      {
      }
    };

    static const input_type_ input;
  };

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::id_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::tx_ix_class_::tx_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::tx_ix_class_::
  tx (A::table_name, "\"tx_ix_tx\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::tx_ix_class_::index_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::tx_ix_class_::
  index (A::table_name, "\"tx_ix_index\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::tx_ix_class_
  query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::tx_ix;

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_column_class_::op_txid_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_column_class_::
  op_txid (A::table_name, "\"input_op_txid\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_column_class_::op_index_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_column_class_::
  op_index (A::table_name, "\"input_op_index\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_column_class_::scriptSig_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_column_class_::
  scriptSig (A::table_name, "\"input_scriptSig\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_column_class_::sequence_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_column_class_::
  sequence (A::table_name, "\"input_sequence\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite, A >::input;

  // TxHasOutput
  //
  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::Transaction,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::tx_ix_tag::tx_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::Output,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::output_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >
  {
    // tx_ix
    //
    struct tx_ix_base_
    {
      // tx
      //
      typedef
      odb::alias_traits<
        ::joystream::bitcoin::detail::store::Transaction,
        id_sqlite,
        access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::tx_ix_tag::tx_tag>
      tx_alias_;
    };

    // output
    //
    typedef
    odb::alias_traits<
      ::joystream::bitcoin::detail::store::Output,
      id_sqlite,
      access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >::output_tag>
    output_alias_;
  };

  template <typename A>
  struct query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >:
    query_columns_base< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // tx_ix
    //
    struct tx_ix_class_: tx_ix_base_
    {
      tx_ix_class_ ()
      {
      }

      // tx
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      tx_column_type_;

      typedef
      odb::query_pointer<
        odb::pointer_query_columns<
          ::joystream::bitcoin::detail::store::Transaction,
          id_sqlite,
          tx_alias_ > >
      tx_pointer_type_;

      struct tx_type_: tx_pointer_type_, tx_column_type_
      {
        tx_type_ (const char* t, const char* c, const char* conv)
          : tx_column_type_ (t, c, conv)
        {
        }
      };

      static const tx_type_ tx;

      // index
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      index_type_;

      static const index_type_ index;
    };

    static const tx_ix_class_ tx_ix;

    // output
    //
    struct output_column_class_
    {
      output_column_class_ ()
      {
      }

      // value
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          long long unsigned int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      value_type_;

      static const value_type_ value;

      // scriptPubKey
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::query_type,
        sqlite::id_text >
      scriptPubKey_type_;

      static const scriptPubKey_type_ scriptPubKey;
    };

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::joystream::bitcoin::detail::store::Output,
        id_sqlite,
        output_alias_ > >
    output_pointer_type_;

    struct output_type_: output_pointer_type_, output_column_class_
    {
      output_type_ ()
      {
      }
    };

    static const output_type_ output;
  };

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::id_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::tx_ix_class_::tx_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::tx_ix_class_::
  tx (A::table_name, "\"tx_ix_tx\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::tx_ix_class_::index_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::tx_ix_class_::
  index (A::table_name, "\"tx_ix_index\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::tx_ix_class_
  query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::tx_ix;

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::output_column_class_::value_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::output_column_class_::
  value (A::table_name, "\"output_value\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::output_column_class_::scriptPubKey_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::output_column_class_::
  scriptPubKey (A::table_name, "\"output_scriptPubKey\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::output_type_
  query_columns< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite, A >::output;

  // transaction_stat_t
  //
  struct access::view_traits_impl< ::joystream::bitcoin::detail::store::transaction_stat_t, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::joystream::bitcoin::detail::store::Transaction,
      id_sqlite,
      odb::access::object_traits_impl< ::joystream::bitcoin::detail::store::Transaction, id_sqlite > >
  {
  };

  // key_stat_t
  //
  struct access::view_traits_impl< ::joystream::bitcoin::detail::store::key_stat_t, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::joystream::bitcoin::detail::store::Key,
      id_sqlite,
      odb::access::object_traits_impl< ::joystream::bitcoin::detail::store::Key, id_sqlite > >
  {
  };

  // key_view_t
  //
  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::Key,
    id_sqlite,
    access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::key_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::Address,
    id_sqlite,
    access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::address_tag>
  {
    static const char table_name[];
  };

  struct access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::query_columns
  {
    // key
    //
    typedef
    odb::pointer_query_columns<
      ::joystream::bitcoin::detail::store::Key,
      id_sqlite,
      odb::alias_traits< ::joystream::bitcoin::detail::store::Key,
        id_sqlite,
        access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::key_tag> >
    key;

    // address
    //
    typedef
    odb::pointer_query_columns<
      ::joystream::bitcoin::detail::store::Address,
      id_sqlite,
      odb::alias_traits< ::joystream::bitcoin::detail::store::Address,
        id_sqlite,
        access::view_traits_impl< ::joystream::bitcoin::detail::store::key_view_t, id_sqlite >::address_tag> >
    address;
  };

  // InBoundPayment
  //
  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::Address,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::receiveAddress_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >
  {
    // receiveAddress
    //
    typedef
    odb::alias_traits<
      ::joystream::bitcoin::detail::store::Address,
      id_sqlite,
      access::object_traits_impl< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >::receiveAddress_tag>
    receiveAddress_alias_;
  };

  template <typename A>
  struct query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >:
    query_columns_base< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // created
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    created_type_;

    static const created_type_ created;

    // note
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    note_type_;

    static const note_type_ note;

    // receiveAddress
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    receiveAddress_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::joystream::bitcoin::detail::store::Address,
        id_sqlite,
        receiveAddress_alias_ > >
    receiveAddress_pointer_type_;

    struct receiveAddress_type_: receiveAddress_pointer_type_, receiveAddress_column_type_
    {
      receiveAddress_type_ (const char* t, const char* c, const char* conv)
        : receiveAddress_column_type_ (t, c, conv)
      {
      }
    };

    static const receiveAddress_type_ receiveAddress;
  };

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::id_type_
  query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::created_type_
  query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::
  created (A::table_name, "\"created\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::note_type_
  query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::
  note (A::table_name, "\"note\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::receiveAddress_type_
  query_columns< ::joystream::bitcoin::detail::store::InBoundPayment, id_sqlite, A >::
  receiveAddress (A::table_name, "\"receiveAddress\"", 0);

  // OutBoundPayment
  //
  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::Address,
    id_sqlite,
    access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::changeAddress_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >
  {
    // changeAddress
    //
    typedef
    odb::alias_traits<
      ::joystream::bitcoin::detail::store::Address,
      id_sqlite,
      access::object_traits_impl< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >::changeAddress_tag>
    changeAddress_alias_;
  };

  template <typename A>
  struct query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >:
    query_columns_base< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // fee
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    fee_type_;

    static const fee_type_ fee;

    // amount
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    amount_type_;

    static const amount_type_ amount;

    // note
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    note_type_;

    static const note_type_ note;

    // created
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    created_type_;

    static const created_type_ created;

    // toAddress
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    toAddress_type_;

    static const toAddress_type_ toAddress;

    // changeAddress
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    changeAddress_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::joystream::bitcoin::detail::store::Address,
        id_sqlite,
        changeAddress_alias_ > >
    changeAddress_pointer_type_;

    struct changeAddress_type_: changeAddress_pointer_type_, changeAddress_column_type_
    {
      changeAddress_type_ (const char* t, const char* c, const char* conv)
        : changeAddress_column_type_ (t, c, conv)
      {
      }
    };

    static const changeAddress_type_ changeAddress;
  };

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::id_type_
  query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::fee_type_
  query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  fee (A::table_name, "\"fee\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::amount_type_
  query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  amount (A::table_name, "\"amount\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::note_type_
  query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  note (A::table_name, "\"note\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::created_type_
  query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  created (A::table_name, "\"created\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::toAddress_type_
  query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  toAddress (A::table_name, "\"toAddress\"", 0);

  template <typename A>
  const typename query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::changeAddress_type_
  query_columns< ::joystream::bitcoin::detail::store::OutBoundPayment, id_sqlite, A >::
  changeAddress (A::table_name, "\"changeAddress\"", 0);

  // outputs_view_t
  //
  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::Address,
    id_sqlite,
    access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::address_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::Transaction,
    id_sqlite,
    access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::output_tx_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::BlockHeader,
    id_sqlite,
    access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::output_block_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::joystream::bitcoin::detail::store::Transaction,
    id_sqlite,
    access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::spending_tx_tag>
  {
    static const char table_name[];
  };

  struct access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::query_columns
  {
    // Output
    //
    typedef
    odb::pointer_query_columns<
      ::joystream::bitcoin::detail::store::Output,
      id_sqlite,
      odb::access::object_traits_impl< ::joystream::bitcoin::detail::store::Output, id_sqlite > >
    Output;

    // address
    //
    typedef
    odb::pointer_query_columns<
      ::joystream::bitcoin::detail::store::Address,
      id_sqlite,
      odb::alias_traits< ::joystream::bitcoin::detail::store::Address,
        id_sqlite,
        access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::address_tag> >
    address;

    // TxHasOutput
    //
    typedef
    odb::pointer_query_columns<
      ::joystream::bitcoin::detail::store::TxHasOutput,
      id_sqlite,
      odb::access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasOutput, id_sqlite > >
    TxHasOutput;

    // output_tx
    //
    typedef
    odb::pointer_query_columns<
      ::joystream::bitcoin::detail::store::Transaction,
      id_sqlite,
      odb::alias_traits< ::joystream::bitcoin::detail::store::Transaction,
        id_sqlite,
        access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::output_tx_tag> >
    output_tx;

    // output_block
    //
    typedef
    odb::pointer_query_columns<
      ::joystream::bitcoin::detail::store::BlockHeader,
      id_sqlite,
      odb::alias_traits< ::joystream::bitcoin::detail::store::BlockHeader,
        id_sqlite,
        access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::output_block_tag> >
    output_block;

    // Input
    //
    typedef
    odb::pointer_query_columns<
      ::joystream::bitcoin::detail::store::Input,
      id_sqlite,
      odb::access::object_traits_impl< ::joystream::bitcoin::detail::store::Input, id_sqlite > >
    Input;

    // TxHasInput
    //
    typedef
    odb::pointer_query_columns<
      ::joystream::bitcoin::detail::store::TxHasInput,
      id_sqlite,
      odb::access::object_traits_impl< ::joystream::bitcoin::detail::store::TxHasInput, id_sqlite > >
    TxHasInput;

    // spending_tx
    //
    typedef
    odb::pointer_query_columns<
      ::joystream::bitcoin::detail::store::Transaction,
      id_sqlite,
      odb::alias_traits< ::joystream::bitcoin::detail::store::Transaction,
        id_sqlite,
        access::view_traits_impl< ::joystream::bitcoin::detail::store::outputs_view_t, id_sqlite >::spending_tx_tag> >
    spending_tx;
  };
}

#include "Schema-odb.ixx"

#include <odb/post.hxx>

#endif // SCHEMA_ODB_HXX
