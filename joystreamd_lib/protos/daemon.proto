syntax = "proto3";

package joystream.daemon.rpc;

service Wallet {
  rpc ReceivedAddress(Void) returns (BitcoinAddress) {}
  rpc Balance(Void) returns (BTCAmount) {}
  rpc UnconfirmedBalance(Void) returns (BTCAmount) {}
  rpc Status(Void) returns (WalletStatus) {}
  rpc SyncWallet(Void) returns (Void) {}
  rpc SuscribeStatus(Void) returns (stream WalletStatus) {}
}

message WalletStatus {

  enum Status {
    UNINITIALIZED = 0;
    OFFLINE = 1;
    CONNECTING = 2;
    SYNCHING_HEADERS = 3;
    SYNCHING_BLOCKS = 4;
    SYNCHED = 5;
  }

  Status status = 1;
}

message BTCAmount {
  float amount = 1;
}

message BitcoinAddress {
  string address = 1;
}

service Daemon {
  rpc Pause(Void) returns (Void) {}

  rpc StartTorrent(Torrent) returns (Void) {}
  rpc PauseTorrent(Torrent) returns (Void) {}
  rpc StopTorrent(Torrent) returns (Void) {}

  rpc SuscribeEvents(Void) returns (stream Event) {}

  rpc AddTorrent(TorrentIdentifierRequest) returns (Void) {}
  rpc BuyTorrent(BuyTorrentRequest) returns (Void) {}
  rpc SellTorrent(SellTorrentRequest) returns (Void) {}
  rpc RemoveTorrent(Torrent) returns (Void) {}
  rpc ListTorrents(Void) returns (stream Torrent) {}

  rpc GetTorrentState(Torrent) returns (TorrentState) {}
  //rpc GetPeerState(PeerStateRequest) returns (PeerState) {}
}

message Void {

}

message BuyTorrentRequest {
  string infohash = 1;
  int32 nsellers = 2;
  uint64 price = 3;
  uint32 locktime = 4;
  uint64 settlement_fee = 5;
  uint64 contractFeeRate = 6;
  double secondsBeforeCreatingContract = 7;
  double secondsBeforePieceTimeout  = 8;
}

message SellTorrentRequest {
  string infohash = 1;
  uint64 minPrice = 2;
  uint64 minLock = 3;
  int32 maxSellers = 4;
  uint64 minContractFeePerKb = 5;
  uint64 settlementFee = 6;

}

message TorrentIdentifierRequest {
  enum Type {
    INFOHASH = 0;
    MAGNETLINK = 1;
    TORRENTFILE = 2;
  }

  Type type = 1;
  string infohash = 2;
  string mangetlink = 3;
  bytes data = 4;
}

message Torrent {
  string infohash = 1;
  string name = 2;
}

message TorrentFile {
  bytes data = 1;
}

message TorrentState {

  enum State {
    QUEUED_FOR_CHECKING = 0;
    CHECKING_FILES = 1;
    DOWNLOADING = 2;
    FINISHED = 3;
    SEEDING = 4;
    ALLOCATING = 5;
  }

  State state = 1;
}

message Event {
  string name = 1;
}
