// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daemon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "daemon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace joystream {
namespace daemon {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* Void_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Void_reflection_ = NULL;
const ::google::protobuf::Descriptor* Torrent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Torrent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TorrentState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TorrentState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_daemon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_daemon_2eproto() {
  protobuf_AddDesc_daemon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "daemon.proto");
  GOOGLE_CHECK(file != NULL);
  Void_descriptor_ = file->message_type(0);
  static const int Void_offsets_[1] = {
  };
  Void_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Void_descriptor_,
      Void::default_instance_,
      Void_offsets_,
      -1,
      -1,
      -1,
      sizeof(Void),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Void, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Void, _is_default_instance_));
  Torrent_descriptor_ = file->message_type(1);
  static const int Torrent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torrent, infohash_),
  };
  Torrent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Torrent_descriptor_,
      Torrent::default_instance_,
      Torrent_offsets_,
      -1,
      -1,
      -1,
      sizeof(Torrent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torrent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Torrent, _is_default_instance_));
  TorrentState_descriptor_ = file->message_type(2);
  static const int TorrentState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorrentState, paused_),
  };
  TorrentState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TorrentState_descriptor_,
      TorrentState::default_instance_,
      TorrentState_offsets_,
      -1,
      -1,
      -1,
      sizeof(TorrentState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorrentState, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TorrentState, _is_default_instance_));
  Event_descriptor_ = file->message_type(3);
  static const int Event_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, name_),
  };
  Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      -1,
      -1,
      -1,
      sizeof(Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_daemon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Void_descriptor_, &Void::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Torrent_descriptor_, &Torrent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TorrentState_descriptor_, &TorrentState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Event_descriptor_, &Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_daemon_2eproto() {
  delete Void::default_instance_;
  delete Void_reflection_;
  delete Torrent::default_instance_;
  delete Torrent_reflection_;
  delete TorrentState::default_instance_;
  delete TorrentState_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
}

void protobuf_AddDesc_daemon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_daemon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014daemon.proto\022\024joystream.daemon.rpc\"\006\n\004"
    "Void\"\033\n\007Torrent\022\020\n\010infohash\030\001 \001(\t\"\036\n\014Tor"
    "rentState\022\016\n\006paused\030\001 \001(\010\"\025\n\005Event\022\014\n\004na"
    "me\030\001 \001(\t2\345\003\n\006Daemon\022A\n\005Pause\022\032.joystream"
    ".daemon.rpc.Void\032\032.joystream.daemon.rpc."
    "Void\"\000\022H\n\tGetEvents\022\032.joystream.daemon.r"
    "pc.Void\032\033.joystream.daemon.rpc.Event\"\0000\001"
    "\022Q\n\nAddTorrent\022\035.joystream.daemon.rpc.To"
    "rrent\032\".joystream.daemon.rpc.TorrentStat"
    "e\"\000\022T\n\rRemoveTorrent\022\035.joystream.daemon."
    "rpc.Torrent\032\".joystream.daemon.rpc.Torre"
    "ntState\"\000\022M\n\014ListTorrents\022\032.joystream.da"
    "emon.rpc.Void\032\035.joystream.daemon.rpc.Tor"
    "rent\"\0000\001\022V\n\017GetTorrentState\022\035.joystream."
    "daemon.rpc.Torrent\032\".joystream.daemon.rp"
    "c.TorrentState\"\000b\006proto3", 624);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "daemon.proto", &protobuf_RegisterTypes);
  Void::default_instance_ = new Void();
  Torrent::default_instance_ = new Torrent();
  TorrentState::default_instance_ = new TorrentState();
  Event::default_instance_ = new Event();
  Void::default_instance_->InitAsDefaultInstance();
  Torrent::default_instance_->InitAsDefaultInstance();
  TorrentState::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_daemon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_daemon_2eproto {
  StaticDescriptorInitializer_daemon_2eproto() {
    protobuf_AddDesc_daemon_2eproto();
  }
} static_descriptor_initializer_daemon_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Void::Void()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:joystream.daemon.rpc.Void)
}

void Void::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Void::Void(const Void& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:joystream.daemon.rpc.Void)
}

void Void::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Void::~Void() {
  // @@protoc_insertion_point(destructor:joystream.daemon.rpc.Void)
  SharedDtor();
}

void Void::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Void::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Void::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Void_descriptor_;
}

const Void& Void::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

Void* Void::default_instance_ = NULL;

Void* Void::New(::google::protobuf::Arena* arena) const {
  Void* n = new Void;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Void::Clear() {
// @@protoc_insertion_point(message_clear_start:joystream.daemon.rpc.Void)
}

bool Void::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:joystream.daemon.rpc.Void)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:joystream.daemon.rpc.Void)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:joystream.daemon.rpc.Void)
  return false;
#undef DO_
}

void Void::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:joystream.daemon.rpc.Void)
  // @@protoc_insertion_point(serialize_end:joystream.daemon.rpc.Void)
}

::google::protobuf::uint8* Void::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:joystream.daemon.rpc.Void)
  // @@protoc_insertion_point(serialize_to_array_end:joystream.daemon.rpc.Void)
  return target;
}

int Void::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:joystream.daemon.rpc.Void)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Void::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:joystream.daemon.rpc.Void)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Void* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Void>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:joystream.daemon.rpc.Void)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:joystream.daemon.rpc.Void)
    MergeFrom(*source);
  }
}

void Void::MergeFrom(const Void& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:joystream.daemon.rpc.Void)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void Void::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:joystream.daemon.rpc.Void)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Void::CopyFrom(const Void& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:joystream.daemon.rpc.Void)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Void::IsInitialized() const {

  return true;
}

void Void::Swap(Void* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Void::InternalSwap(Void* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Void::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Void_descriptor_;
  metadata.reflection = Void_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Void

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Torrent::kInfohashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Torrent::Torrent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:joystream.daemon.rpc.Torrent)
}

void Torrent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Torrent::Torrent(const Torrent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:joystream.daemon.rpc.Torrent)
}

void Torrent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  infohash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Torrent::~Torrent() {
  // @@protoc_insertion_point(destructor:joystream.daemon.rpc.Torrent)
  SharedDtor();
}

void Torrent::SharedDtor() {
  infohash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Torrent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Torrent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Torrent_descriptor_;
}

const Torrent& Torrent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

Torrent* Torrent::default_instance_ = NULL;

Torrent* Torrent::New(::google::protobuf::Arena* arena) const {
  Torrent* n = new Torrent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Torrent::Clear() {
// @@protoc_insertion_point(message_clear_start:joystream.daemon.rpc.Torrent)
  infohash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Torrent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:joystream.daemon.rpc.Torrent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string infohash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infohash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->infohash().data(), this->infohash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "joystream.daemon.rpc.Torrent.infohash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:joystream.daemon.rpc.Torrent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:joystream.daemon.rpc.Torrent)
  return false;
#undef DO_
}

void Torrent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:joystream.daemon.rpc.Torrent)
  // optional string infohash = 1;
  if (this->infohash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->infohash().data(), this->infohash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "joystream.daemon.rpc.Torrent.infohash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->infohash(), output);
  }

  // @@protoc_insertion_point(serialize_end:joystream.daemon.rpc.Torrent)
}

::google::protobuf::uint8* Torrent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:joystream.daemon.rpc.Torrent)
  // optional string infohash = 1;
  if (this->infohash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->infohash().data(), this->infohash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "joystream.daemon.rpc.Torrent.infohash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->infohash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:joystream.daemon.rpc.Torrent)
  return target;
}

int Torrent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:joystream.daemon.rpc.Torrent)
  int total_size = 0;

  // optional string infohash = 1;
  if (this->infohash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->infohash());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Torrent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:joystream.daemon.rpc.Torrent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Torrent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Torrent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:joystream.daemon.rpc.Torrent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:joystream.daemon.rpc.Torrent)
    MergeFrom(*source);
  }
}

void Torrent::MergeFrom(const Torrent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:joystream.daemon.rpc.Torrent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.infohash().size() > 0) {

    infohash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infohash_);
  }
}

void Torrent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:joystream.daemon.rpc.Torrent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Torrent::CopyFrom(const Torrent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:joystream.daemon.rpc.Torrent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Torrent::IsInitialized() const {

  return true;
}

void Torrent::Swap(Torrent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Torrent::InternalSwap(Torrent* other) {
  infohash_.Swap(&other->infohash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Torrent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Torrent_descriptor_;
  metadata.reflection = Torrent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Torrent

// optional string infohash = 1;
void Torrent::clear_infohash() {
  infohash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Torrent::infohash() const {
  // @@protoc_insertion_point(field_get:joystream.daemon.rpc.Torrent.infohash)
  return infohash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Torrent::set_infohash(const ::std::string& value) {
  
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:joystream.daemon.rpc.Torrent.infohash)
}
 void Torrent::set_infohash(const char* value) {
  
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:joystream.daemon.rpc.Torrent.infohash)
}
 void Torrent::set_infohash(const char* value, size_t size) {
  
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:joystream.daemon.rpc.Torrent.infohash)
}
 ::std::string* Torrent::mutable_infohash() {
  
  // @@protoc_insertion_point(field_mutable:joystream.daemon.rpc.Torrent.infohash)
  return infohash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Torrent::release_infohash() {
  // @@protoc_insertion_point(field_release:joystream.daemon.rpc.Torrent.infohash)
  
  return infohash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Torrent::set_allocated_infohash(::std::string* infohash) {
  if (infohash != NULL) {
    
  } else {
    
  }
  infohash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), infohash);
  // @@protoc_insertion_point(field_set_allocated:joystream.daemon.rpc.Torrent.infohash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TorrentState::kPausedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TorrentState::TorrentState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:joystream.daemon.rpc.TorrentState)
}

void TorrentState::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TorrentState::TorrentState(const TorrentState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:joystream.daemon.rpc.TorrentState)
}

void TorrentState::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  paused_ = false;
}

TorrentState::~TorrentState() {
  // @@protoc_insertion_point(destructor:joystream.daemon.rpc.TorrentState)
  SharedDtor();
}

void TorrentState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TorrentState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TorrentState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TorrentState_descriptor_;
}

const TorrentState& TorrentState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

TorrentState* TorrentState::default_instance_ = NULL;

TorrentState* TorrentState::New(::google::protobuf::Arena* arena) const {
  TorrentState* n = new TorrentState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TorrentState::Clear() {
// @@protoc_insertion_point(message_clear_start:joystream.daemon.rpc.TorrentState)
  paused_ = false;
}

bool TorrentState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:joystream.daemon.rpc.TorrentState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool paused = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paused_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:joystream.daemon.rpc.TorrentState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:joystream.daemon.rpc.TorrentState)
  return false;
#undef DO_
}

void TorrentState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:joystream.daemon.rpc.TorrentState)
  // optional bool paused = 1;
  if (this->paused() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->paused(), output);
  }

  // @@protoc_insertion_point(serialize_end:joystream.daemon.rpc.TorrentState)
}

::google::protobuf::uint8* TorrentState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:joystream.daemon.rpc.TorrentState)
  // optional bool paused = 1;
  if (this->paused() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->paused(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:joystream.daemon.rpc.TorrentState)
  return target;
}

int TorrentState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:joystream.daemon.rpc.TorrentState)
  int total_size = 0;

  // optional bool paused = 1;
  if (this->paused() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TorrentState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:joystream.daemon.rpc.TorrentState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TorrentState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TorrentState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:joystream.daemon.rpc.TorrentState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:joystream.daemon.rpc.TorrentState)
    MergeFrom(*source);
  }
}

void TorrentState::MergeFrom(const TorrentState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:joystream.daemon.rpc.TorrentState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.paused() != 0) {
    set_paused(from.paused());
  }
}

void TorrentState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:joystream.daemon.rpc.TorrentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TorrentState::CopyFrom(const TorrentState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:joystream.daemon.rpc.TorrentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TorrentState::IsInitialized() const {

  return true;
}

void TorrentState::Swap(TorrentState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TorrentState::InternalSwap(TorrentState* other) {
  std::swap(paused_, other->paused_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TorrentState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TorrentState_descriptor_;
  metadata.reflection = TorrentState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TorrentState

// optional bool paused = 1;
void TorrentState::clear_paused() {
  paused_ = false;
}
 bool TorrentState::paused() const {
  // @@protoc_insertion_point(field_get:joystream.daemon.rpc.TorrentState.paused)
  return paused_;
}
 void TorrentState::set_paused(bool value) {
  
  paused_ = value;
  // @@protoc_insertion_point(field_set:joystream.daemon.rpc.TorrentState.paused)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:joystream.daemon.rpc.Event)
}

void Event::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Event::Event(const Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:joystream.daemon.rpc.Event)
}

void Event::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:joystream.daemon.rpc.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daemon_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:joystream.daemon.rpc.Event)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:joystream.daemon.rpc.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "joystream.daemon.rpc.Event.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:joystream.daemon.rpc.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:joystream.daemon.rpc.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:joystream.daemon.rpc.Event)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "joystream.daemon.rpc.Event.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:joystream.daemon.rpc.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:joystream.daemon.rpc.Event)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "joystream.daemon.rpc.Event.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:joystream.daemon.rpc.Event)
  return target;
}

int Event::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:joystream.daemon.rpc.Event)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:joystream.daemon.rpc.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Event* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:joystream.daemon.rpc.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:joystream.daemon.rpc.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:joystream.daemon.rpc.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:joystream.daemon.rpc.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:joystream.daemon.rpc.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// optional string name = 1;
void Event::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Event::name() const {
  // @@protoc_insertion_point(field_get:joystream.daemon.rpc.Event.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:joystream.daemon.rpc.Event.name)
}
 void Event::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:joystream.daemon.rpc.Event.name)
}
 void Event::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:joystream.daemon.rpc.Event.name)
}
 ::std::string* Event::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:joystream.daemon.rpc.Event.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Event::release_name() {
  // @@protoc_insertion_point(field_release:joystream.daemon.rpc.Event.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:joystream.daemon.rpc.Event.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace daemon
}  // namespace joystream

// @@protoc_insertion_point(global_scope)
