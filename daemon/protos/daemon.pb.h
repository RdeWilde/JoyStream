// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daemon.proto

#ifndef PROTOBUF_daemon_2eproto__INCLUDED
#define PROTOBUF_daemon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace joystream {
namespace daemon {
namespace rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_daemon_2eproto();
void protobuf_AssignDesc_daemon_2eproto();
void protobuf_ShutdownFile_daemon_2eproto();

class Event;
class Torrent;
class TorrentState;
class Void;

// ===================================================================

class Void : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:joystream.daemon.rpc.Void) */ {
 public:
  Void();
  virtual ~Void();

  Void(const Void& from);

  inline Void& operator=(const Void& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Void& default_instance();

  void Swap(Void* other);

  // implements Message ----------------------------------------------

  inline Void* New() const { return New(NULL); }

  Void* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Void& from);
  void MergeFrom(const Void& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Void* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:joystream.daemon.rpc.Void)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_daemon_2eproto();
  friend void protobuf_AssignDesc_daemon_2eproto();
  friend void protobuf_ShutdownFile_daemon_2eproto();

  void InitAsDefaultInstance();
  static Void* default_instance_;
};
// -------------------------------------------------------------------

class Torrent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:joystream.daemon.rpc.Torrent) */ {
 public:
  Torrent();
  virtual ~Torrent();

  Torrent(const Torrent& from);

  inline Torrent& operator=(const Torrent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Torrent& default_instance();

  void Swap(Torrent* other);

  // implements Message ----------------------------------------------

  inline Torrent* New() const { return New(NULL); }

  Torrent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Torrent& from);
  void MergeFrom(const Torrent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Torrent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string infohash = 1;
  void clear_infohash();
  static const int kInfohashFieldNumber = 1;
  const ::std::string& infohash() const;
  void set_infohash(const ::std::string& value);
  void set_infohash(const char* value);
  void set_infohash(const char* value, size_t size);
  ::std::string* mutable_infohash();
  ::std::string* release_infohash();
  void set_allocated_infohash(::std::string* infohash);

  // @@protoc_insertion_point(class_scope:joystream.daemon.rpc.Torrent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr infohash_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_daemon_2eproto();
  friend void protobuf_AssignDesc_daemon_2eproto();
  friend void protobuf_ShutdownFile_daemon_2eproto();

  void InitAsDefaultInstance();
  static Torrent* default_instance_;
};
// -------------------------------------------------------------------

class TorrentState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:joystream.daemon.rpc.TorrentState) */ {
 public:
  TorrentState();
  virtual ~TorrentState();

  TorrentState(const TorrentState& from);

  inline TorrentState& operator=(const TorrentState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TorrentState& default_instance();

  void Swap(TorrentState* other);

  // implements Message ----------------------------------------------

  inline TorrentState* New() const { return New(NULL); }

  TorrentState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TorrentState& from);
  void MergeFrom(const TorrentState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TorrentState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool paused = 1;
  void clear_paused();
  static const int kPausedFieldNumber = 1;
  bool paused() const;
  void set_paused(bool value);

  // @@protoc_insertion_point(class_scope:joystream.daemon.rpc.TorrentState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool paused_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_daemon_2eproto();
  friend void protobuf_AssignDesc_daemon_2eproto();
  friend void protobuf_ShutdownFile_daemon_2eproto();

  void InitAsDefaultInstance();
  static TorrentState* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:joystream.daemon.rpc.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  inline Event* New() const { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:joystream.daemon.rpc.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_daemon_2eproto();
  friend void protobuf_AssignDesc_daemon_2eproto();
  friend void protobuf_ShutdownFile_daemon_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Void

// -------------------------------------------------------------------

// Torrent

// optional string infohash = 1;
inline void Torrent::clear_infohash() {
  infohash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Torrent::infohash() const {
  // @@protoc_insertion_point(field_get:joystream.daemon.rpc.Torrent.infohash)
  return infohash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Torrent::set_infohash(const ::std::string& value) {
  
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:joystream.daemon.rpc.Torrent.infohash)
}
inline void Torrent::set_infohash(const char* value) {
  
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:joystream.daemon.rpc.Torrent.infohash)
}
inline void Torrent::set_infohash(const char* value, size_t size) {
  
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:joystream.daemon.rpc.Torrent.infohash)
}
inline ::std::string* Torrent::mutable_infohash() {
  
  // @@protoc_insertion_point(field_mutable:joystream.daemon.rpc.Torrent.infohash)
  return infohash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Torrent::release_infohash() {
  // @@protoc_insertion_point(field_release:joystream.daemon.rpc.Torrent.infohash)
  
  return infohash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Torrent::set_allocated_infohash(::std::string* infohash) {
  if (infohash != NULL) {
    
  } else {
    
  }
  infohash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), infohash);
  // @@protoc_insertion_point(field_set_allocated:joystream.daemon.rpc.Torrent.infohash)
}

// -------------------------------------------------------------------

// TorrentState

// optional bool paused = 1;
inline void TorrentState::clear_paused() {
  paused_ = false;
}
inline bool TorrentState::paused() const {
  // @@protoc_insertion_point(field_get:joystream.daemon.rpc.TorrentState.paused)
  return paused_;
}
inline void TorrentState::set_paused(bool value) {
  
  paused_ = value;
  // @@protoc_insertion_point(field_set:joystream.daemon.rpc.TorrentState.paused)
}

// -------------------------------------------------------------------

// Event

// optional string name = 1;
inline void Event::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Event::name() const {
  // @@protoc_insertion_point(field_get:joystream.daemon.rpc.Event.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:joystream.daemon.rpc.Event.name)
}
inline void Event::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:joystream.daemon.rpc.Event.name)
}
inline void Event::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:joystream.daemon.rpc.Event.name)
}
inline ::std::string* Event::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:joystream.daemon.rpc.Event.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_name() {
  // @@protoc_insertion_point(field_release:joystream.daemon.rpc.Event.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:joystream.daemon.rpc.Event.name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace daemon
}  // namespace joystream

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_daemon_2eproto__INCLUDED
